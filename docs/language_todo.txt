** Language TODO / IDEAS **

General:
    - Pointers:
        - behave exactly like 'c' pointers
        - pointer dereference operator is '$'
        - '^' for non nullable pointer
        - '?' for nullable pointer
        - '!' to convert a nullable into non nullable pointer
        - 'null' keyword for null pointers
    - if let blah = (like swift) syntax for converting nullable into non nullable pointers
    - Allow right side of shift expression to be an integer of any type
    - References:
        - exact same properties as c++ references
        - declared using ref blah = 
        - once initialized, cannot be (validly) changed
    - automatic type promotion
    - automatic type demotion, if fitting, for constant expressions
    - 'extern' functions
    - 'any' type
        - Can only be stored by reference or by pointer
        - Cannot be dereferenced if a pointer (must be cast first)
        - Cannot be accessed if a reference (must be cast first)
        - Cannot be copied by value into functions, assigned etc.
	- Constructor like syntax for primitives, like Swift: 
        e.g let x = int(2)
    - 4 Variable storage classes:
        - let <CLASS> x = 
        - 'mut' = modifiable and addressible
        - 'const' = not modifiable but addressible, may be modified elsewhere
        - 'immut' = guaranteed NEVER modifiable (e.g ROM variable, data section string literal) but addressible
            - default for all types except those that default to ssa
        - 'ssa' = (pure functional or single static assignment form) guaranteed NEVER modifiable and NOT addressible
            - can be used by default for integer etc. types
	- parsing float numbers
	- parsing chars
    - for .. do
        - Completely range based for
    - rfor .. do
    - break out of labeled loop
    - continue to labeled loop
    - 'in' expression
    - disallow casting away nullability with 'cast'
    - disallow casting away constness with 'cast'
    - 'defer' statement for delayed logic
    - Variables must be initialized when declared
        - '= undefined' for no initialization
        - '= default' for default init
    - Branch prediction constructs.
    - typeof and istype expressions
    - Support assign expressions that both return void and non void
        Can define += operator which returns and which does not return
            - limited case of overloading based on return type
    - Declare multiple variables with same 'let'
    - Allow global variables to reference each other in an order independent way
    - Lexer: '\' to allow explicit multi line statements
    - Arbitrary precision integers
    - Fixed point types
    - Built in vector types (e.g vec2f, vec3f64)
    - let ssa x =     
    - 'ssa' modifier for name values
        - applied by default to primitive types
        - classes can be marked 'ssa' meanining they support ssa
            - if marked 'ssa' then 'ssa' by default
        - member functions must be 'ssa func' to operate on an ssa value
        - though can compile a function in two+ modes by doing 'ssa, const, immut?'
    - 'type_func' type functions that operate types rather than variables.
        - Can use for template param type checking
        - Can return either a value or another type

Modules:
    - Each translation unit compiles to a module stub
    - Module stub hides non public members
    - Module stub defines size info of type

Compound types:
    bitfield - struct like, each member is a single bit
    struct - no access control, Just raw data.
        - Init with braces or named init.
        - No non trivial constructors (must be bitwise init,copy)
        - Intended for interfacing with C and low level code
    classes - eventually...

Primitives Types:
    char8:		8-bit unsigned character type
    char16:		16-bit unsigned character type
    char32:		32-bit unsigend character type
    float16:    16-bit floating point number
    float32:    32-bit floating point number
    float64:    64-bit floating point number
    float80:    80-bit floating point number
    float128:   128-bit floating point number

Primitive Type Aliases:
    char: 	char8 by default (for utf8)
    uchar:  char32 by default (for utf32)
    float:  float32 by default (for single precision)
