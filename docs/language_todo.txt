** Language TODO / IDEAS **

General:
    - Pointers?
    - References?
    - 'extern' functions
	- var x = Type(2)
	- parsing float numbers
	- parsing chars
    - for .. do
        - Completely range based for
    - rfor .. do
    - break out of labeled loop
    - continue to labeled loop
    - 'in' expression
    - 'defer' statement for delayed logic
    - Variables must be initialized when declared
        - '= undefined' for no initialization
        - '= default' for default init
    - SSA style 'const' variables. Maybe make optimizer detect constness?
    - Branch prediction constructs.
    - typeof and istype expressions
    - Support assign expressions that both return void and non void
        Can define += operator which returns and which does not return
            - limited case of overloading based on return type
    - Declare multiple variables with same 'let'
    - Allow global variables to reference each other in an order independent way
    - Lexer: '\' to allow explicit multi line statements
    - Arbitrary precision integers
    - Fixed point types
    - Built in vector types (e.g vec2f, vec3f64)

Modules:
    - Each translation unit compiles to a module stub
    - Module stub hides non public members
    - Module stub defines size info of type

Compound types:
    bitfield - struct like, each member is a single bit
    struct - no access control, Just raw data.
        - Init with braces or named init.
        - No non trivial constructors (must be bitwise init,copy)
        - Intended for interfacing with C and low level code
    classes - eventually...

Primitives Types:
    char8:		8-bit unsigned character type
    char16:		16-bit unsigned character type
    char32:		32-bit unsigend character type
    float16:    16-bit floating point number
    float32:    32-bit floating point number
    float64:    64-bit floating point number
    float80:    80-bit floating point number
    float128:   128-bit floating point number

Primitive Type Aliases:
    char: 	char8 by default (for utf8)
    uchar:  char32 by default (for utf32)
    float:  float32 by default (for single precision)
