Module:
    Scope <EOF>

Scope:
    Stmnts

Stmnts:
    Stmnt
    Stmnt Stmnts

Stmnt:
	NoOpStmnt
    PrintStmnt
    VarDecl
    IfStmnt
    WhileStmnt
    AssignExpr

NoOpStmnt:
    nop

PrintStmnt:
    print ( AssignExpr )

VarDecl:
    var Identifier = AssignExpr

IfStmnt:
	if|unless AssignExpr [then] Scope end
	if|unless AssignExpr [then] Scope or IfStmnt
	if|unless AssignExpr [then] Scope else Scope end

WhileStmnt:
	while|until AssignExpr [do] Scope end

AssignExpr:
    OrExpr
    OrExpr = AssignExpr

OrExpr:
	AndExpr
	AndExpr or OrExpr

AndExpr:
	NotExpr
	NotExpr and AndExpr

NotExpr:
	EqExpr
	not NotExpr

EqExpr:
	RelExpr
	RelExpr == EqExpr
	RelExpr != EqExpr

RelExpr:
	AddSubExpr
	AddSubExpr < RelExpr
	AddSubExpr <= RelExpr
	AddSubExpr > RelExpr
	AddSubExpr >= RelExpr

AddSubExpr:
	MulDivExpr
	MulDivExpr + AddSubExpr
	MulDivExpr - AddSubExpr

MulDivExpr:
	UnaryExpr
	UnaryExpr * MulDivExpr
	UnaryExpr / MulDivExpr

UnaryExpr:
	PrimaryExpr
	-PrimaryExpr
	+PrimaryExpr
	(AssignExpr)

PrimaryExpr:
	IntLit
	BoolLit
	StrLit
    Identifier
    ReadnumExpr

ReadnumExpr:
    readnum ( )
