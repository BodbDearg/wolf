Module:
	DeclDefs <EOF>

DeclDefs:
	DeclDef
	DeclDef DeclDefs

DeclDef:
	Func
	VarDecl

Func:
	func Identifier ( [FuncArgList] ) [ -> Type ] Scope end

FuncArgList:
	FuncArg
	FuncArg , FuncArgList

FuncArg:
	Type Identifier

Type:
	PrimitiveType
	Type [ TernaryExpr ]

PrimitiveType:
	void|int|bool|string

Scope:
    Stmnts

Stmnts:
    Stmnt
    Stmnt Stmnts

Stmnt:
	NoOpStmnt
    PrintStmnt
    VarDecl
    IfStmnt
    WhileStmnt
    LoopStmnt
    ScopeStmnt
	BreakStmnt
	NextStmnt
	ReturnStmnt
	OpStmnt

NoOpStmnt:
    nop

PrintStmnt:
    print ( TernaryExpr )

VarDecl:
    var Identifier = TernaryExpr

IfStmnt:
	if|unless TernaryExpr [then] Scope end
	if|unless TernaryExpr [then] Scope or IfStmnt
	if|unless TernaryExpr [then] Scope else Scope end

WhileStmnt:
	while|until TernaryExpr [do] Scope end

LoopStmnt:
    loop Scope end
	loop Scope repeat while|until TernaryExpr

ScopeStmnt:
	scope Scope end

BreakStmnt:
	break
	break if|unless TernaryExpr

NextStmnt:
	next
	next if|unless TernaryExpr

ReturnStmnt:
	return
	return TernaryExpr
    return if|unless TernaryExpr
    return TernaryExpr if|unless TernaryExpr

OpStmnt:
	TernaryExpr
	TernaryExpr = TernaryExpr

TernaryExpr:
	OrExpr
	OrExpr ? TernaryExpr : TernaryExpr

OrExpr:
	AndExpr
	AndExpr or OrExpr

AndExpr:
	NotExpr
	NotExpr and AndExpr

NotExpr:
	EqExpr
	not NotExpr

EqExpr:
	RelExpr
	RelExpr == EqExpr
	RelExpr != EqExpr

RelExpr:
	AddSubExpr
	AddSubExpr < RelExpr
	AddSubExpr <= RelExpr
	AddSubExpr > RelExpr
	AddSubExpr >= RelExpr

AddSubExpr:
	MulDivExpr
	MulDivExpr + AddSubExpr
	MulDivExpr - AddSubExpr

MulDivExpr:
	UnaryExpr
	UnaryExpr * MulDivExpr
	UnaryExpr / MulDivExpr

UnaryExpr:
	PostfixExpr
	- PostfixExpr
	+ PostfixExpr
	( TernaryExpr )

PostfixExpr:
	PrimaryExpr
	PostfixExpr FuncCall
	PostfixExpr [ TernaryExpr ]

FuncCall:
	( [FuncCallArgList] )

FuncCallArgList:
	TernaryExpr
	TernaryExpr , FuncCallArgList

PrimaryExpr:
	IntLit
	BoolLit
	StrLit
    ArrayLit
    Identifier
    ReadnumExpr

ArrayLit:
    [ ArrayLitExprs ]

ArrayLitExprs:
    TernaryExpr
    TernaryExpr , ArrayLitExprs

ReadnumExpr:
    readnum ( )
