Module:
	[0..N: DeclDef] EOF

DeclDef:
	Func
	VarDecl

Func:
	func Identifier ( [0..N: FuncArg ,][FuncArg] ) [-> Type] Scope end

FuncArgList:
	FuncArg
	FuncArg , FuncArgList

FuncArg:
	Identifier : Type

Type:
	PrimitiveType
	[ AssignExpr ] Type

PrimitiveType:
	void|int|int64|bool|string

Scope:
    [0..N: Stmnt]

Stmnt:
	NoOpStmnt
    PrintStmnt
    AssertStmnt
    VarDecl
    IfStmnt
    WhileStmnt
    LoopStmnt
    ScopeStmnt
	BreakStmnt
	NextStmnt
	ReturnStmnt
	AssignExpr

NoOpStmnt:
    noop

PrintStmnt:
    print ( AssignExpr )

AssertStmnt:
    assert ( AssignExpr )

VarDecl:
    let Identifier = AssignExpr
    let Identifier : Type = AssignExpr

IfStmnt:
	if|unless AssignExpr [then] Scope end
	if|unless AssignExpr [then] Scope or IfStmnt
	if|unless AssignExpr [then] Scope else Scope end

WhileStmnt:
	while|until AssignExpr [do] Scope end

LoopStmnt:
    loop Scope end
	loop Scope repeat while|until AssignExpr

ScopeStmnt:
	scope Scope end

BreakStmnt:
	break
	break if|unless AssignExpr

NextStmnt:
	next
	next if|unless AssignExpr

ReturnStmnt:
	return
	return AssignExpr
    return if|unless AssignExpr
    return AssignExpr if|unless AssignExpr

AssignExpr:
    TernaryExpr
    TernaryExpr = AssignExpr
    TernaryExpr += AssignExpr
    TernaryExpr -= AssignExpr
	TernaryExpr |= AssignExpr
	TernaryExpr ^= AssignExpr
    TernaryExpr *= AssignExpr
    TernaryExpr /= AssignExpr
    TernaryExpr %= AssignExpr
	TernaryExpr &= AssignExpr
	TernaryExpr <<= AssignExpr
	TernaryExpr >>= AssignExpr
	TernaryExpr >>>= AssignExpr

TernaryExpr:
	LOrExpr
	LOrExpr ? AssignExpr : AssignExpr

LOrExpr:
	LAndExpr
	LAndExpr or LOrExpr

LAndExpr:
	NotExpr
	NotExpr and LAndExpr

NotExpr:
	CmpExpr
	not NotExpr
	~ NotExpr

CmpExpr:
	AddExpr
	AddExpr == CmpExpr
	AddExpr is CmpExpr
	AddExpr != CmpExpr
	AddExpr is not CmpExpr
	AddExpr < CmpExpr
	AddExpr <= CmpExpr
	AddExpr > CmpExpr
	AddExpr >= CmpExpr

AddExpr:
	MulExpr
	MulExpr + AddExpr
	MulExpr - AddExpr
	MulExpr | AddExpr
	MulExpr ^ AddExpr

MulExpr:
	ShiftExpr
	ShiftExpr * MulExpr
	ShiftExpr / MulExpr
	ShiftExpr % MulExpr
	ShiftExpr & MulExpr

ShiftExpr:
	UnaryExpr
	UnaryExpr << ShiftExpr
	UnaryExpr >> ShiftExpr
	UnaryExpr >>> ShiftExpr

UnaryExpr:
	PostfixExpr
	+ UnaryExpr
	- UnaryExpr
	( AssignExpr )

PostfixExpr:
	CastExpr
	CastExpr ++
	CastExpr --
	PostfixExpr FuncCall
	PostfixExpr [ AssignExpr ]

CastExpr:
	PrimaryExpr
	cast ( AssignExpr to Type )

FuncCall:
	( [0..N: AssignExpr ,][AssignExpr] )

PrimaryExpr:
	IntLit
	BoolLit
	StrLit
    ArrayLit
    Identifier
    ReadnumExpr
    TimeExpr
    RandExpr

ArrayLit:
    [ ArrayLitExprs ]

ArrayLitExprs:
    AssignExpr
    AssignExpr , ArrayLitExprs

ReadnumExpr:
    readnum ( )

TimeExpr:
	time ( )

RandExpr:
    rand ( )
	srand ( AssignExpr )
