Module:
	DeclDefs <EOF>

DeclDefs:
	DeclDef
	DeclDef DeclDefs

DeclDef:
	Func
	VarDecl

Func:
	func Identifier ( [FuncArgList] ) [ -> Type ] Scope end

FuncArgList:
	FuncArg
	FuncArg , FuncArgList

FuncArg:
	Type Identifier

Type:
	PrimitiveType
	Type [ AssignExpr ]

PrimitiveType:
	void|int|bool|string

Scope:
    Stmnts

Stmnts:
    Stmnt
    Stmnt Stmnts

Stmnt:
	NoOpStmnt
    PrintStmnt
    VarDecl
    IfStmnt
    WhileStmnt
    LoopStmnt
    ScopeStmnt
	BreakStmnt
	NextStmnt
	ReturnStmnt
	AssignExpr

NoOpStmnt:
    nop

PrintStmnt:
    print ( AssignExpr )

VarDecl:
    var Identifier = AssignExpr

IfStmnt:
	if|unless AssignExpr [then] Scope end
	if|unless AssignExpr [then] Scope or IfStmnt
	if|unless AssignExpr [then] Scope else Scope end

WhileStmnt:
	while|until AssignExpr [do] Scope end

LoopStmnt:
    loop Scope end
	loop Scope repeat while|until AssignExpr

ScopeStmnt:
	scope Scope end

BreakStmnt:
	break
	break if|unless AssignExpr

NextStmnt:
	next
	next if|unless AssignExpr

ReturnStmnt:
	return
	return AssignExpr
    return if|unless AssignExpr
    return AssignExpr if|unless AssignExpr

AssignExpr:
    TernaryExpr
    TernaryExpr = AssignExpr
    TernaryExpr += AssignExpr
    TernaryExpr -= AssignExpr
    TernaryExpr *= AssignExpr
    TernaryExpr /= AssignExpr
    TernaryExpr %= AssignExpr

TernaryExpr:
	OrExpr
	OrExpr ? AssignExpr : AssignExpr

OrExpr:
	AndExpr
	AndExpr or OrExpr

AndExpr:
	*** TODO: BitOrExpr
	*** TODO: BitOrExpr and BitOrExpr

*** TODO: BOrExpr:
	*** TODO: BitXorExpr
	*** TODO: BitXorExpr | BitXorExpr
	
BXorExpr:
	BAndExpr
	BAndExpr ^ BXorExpr

BAndExpr:
	NotOrBNotExpr
	NotOrBNotExpr & BAndExpr

NotOrBNotExpr:
	EqExpr
	not NotOrBNotExpr
	~ NotOrBNotExpr

EqExpr:
	RelExpr
	RelExpr == EqExpr
	RelExpr != EqExpr

RelExpr:
	AddSubExpr
	AddSubExpr < RelExpr
	AddSubExpr <= RelExpr
	AddSubExpr > RelExpr
	AddSubExpr >= RelExpr

AddSubExpr:
	MulDivExpr
	MulDivExpr + AddSubExpr
	MulDivExpr - AddSubExpr

MulDivExpr:
	UnaryExpr
	UnaryExpr * MulDivExpr
	UnaryExpr / MulDivExpr
	UnaryExpr % MulDivExpr

UnaryExpr:
	PostfixExpr
	-PostfixExpr
	+PostfixExpr
	(AssignExpr)

PostfixExpr:
	PrimaryExpr
	PrimaryExpr ++
	PrimaryExpr --
	PostfixExpr FuncCall
	PostfixExpr [ AssignExpr ]

FuncCall:
	( [FuncCallArgList] )

FuncCallArgList:
	AssignExpr
	AssignExpr , FuncCallArgList

PrimaryExpr:
	IntLit
	BoolLit
	StrLit
    ArrayLit
    Identifier
    ReadnumExpr
    TimeExpr
    RandExpr

ArrayLit:
    [ ArrayLitExprs ]

ArrayLitExprs:
    AssignExpr
    AssignExpr , ArrayLitExprs

ReadnumExpr:
    readnum ( )

TimeExpr:
	time ( )

RandExpr:
    rand ( )
	srand ( AssignExpr )
