Language TODO:
	- var x = Type(2)
	- parsing float numbers
	- parsing chars

    - for .. do
        - Completely range based for
    - rfor .. do
    - break out of labeled loop
    - continue to labeled loop
    - 'in' expression

    - Variables must be initialized when declared
    - = void for no initialization
    - = default for default init
    - SSA style 'const' variables. Maybe make optimizer detect constness?
    - Branch prediction constructs.
    - typeof and istype expressions

Modules:
    - Each translation unit compiles to a module stub
    - Module stub hides non public members
    - Module stub defines size info of type

Compound types:
    bitfield - struct like, each member is a single bit
    struct - no access control, Just raw data.
        - Init with braces or named init.
        - No non trivial constructors (must be bitwise init,copy)
        - Intended for interfacing with C and low level code

Primitives Types:
    void:       empty/no-type
    int8:		8-bit signed integer
    uint8:		8-bit unsigned integer
    int16:		16-bit signed integer
    uint16:		16-bit unsigned integer
    int32:		32-bit signed integer
    uint32:		32-bit unsigned integer
    int64:		64-bit signed integer
    uint64:		64-bit unsigned integer
    int128:		128-bit signed integer
    uint128:	128-bit unsigned integer
    char8:		8-bit unsigned character type
    char16:		16-bit unsigned character type
    char32:		32-bit unsigend character type
    float16:    16-bit floating point number
    float32:    32-bit floating point number
    float64:    64-bit floating point number
    float80:    80-bit floating point number
    float128:   128-bit floating point number

Primitive Type Aliases:
	int:    Machine word sized signed int (e.g int64 on 64-bit system)
    uint: 	Machine word sized unsigned int (e.g uint64 on 64-bit system)
    char: 	char8 by default (for utf8)
    uchar:  char32 by default (for utf32)
    float:  float32 by default (for single precision)
