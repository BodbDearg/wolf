;==================================================================================================
; Utility functions
;==================================================================================================
func println(text: string)
    print(text)
    print("\n")
end

func nextln()
    print("\n")
end

func printPrefixTxtAndAmtLn(text: string, amount: int)
    print(text)
    print(amount)
    nextln()
end

; This utility slows down things and asks the user to input a number (any number) before proceeding
; with the rest of the program. Useful for pausing after new information is shown.
func doEnterNumToContinue()
    println("Enter a number to continue...")
    readnum()
end

;==================================================================================================
; Card related functionality
;==================================================================================================

; The card types
var NO_CARD = -1
var CARD_ACE = 0
var CARD_2 = 1
var CARD_3 = 2
var CARD_4 = 3
var CARD_5 = 4
var CARD_6 = 5
var CARD_7 = 6
var CARD_8 = 7
var CARD_9 = 8
var CARD_10 = 9
var CARD_JACK = 10
var CARD_QUEEN = 11
var CARD_KING = 12

; The deck of 52 Cards. 4 of each type
var gCardDeck = [
    CARD_ACE, CARD_ACE, CARD_ACE, CARD_ACE,
    CARD_2, CARD_2, CARD_2, CARD_2,
    CARD_3, CARD_3, CARD_3, CARD_3,
    CARD_4, CARD_4, CARD_4, CARD_4,
    CARD_5, CARD_5, CARD_5, CARD_5,
    CARD_6, CARD_6, CARD_6, CARD_6,
    CARD_7, CARD_7, CARD_7, CARD_7,
    CARD_8, CARD_8, CARD_8, CARD_8,
    CARD_9, CARD_9, CARD_9, CARD_9,
    CARD_10, CARD_10, CARD_10, CARD_10,
    CARD_JACK, CARD_JACK, CARD_JACK, CARD_JACK,
    CARD_QUEEN, CARD_QUEEN, CARD_QUEEN, CARD_QUEEN,
    CARD_KING, CARD_KING, CARD_KING, CARD_KING
]

; The number of times to randomly swap each of the 52 cards in the deck with another card
var NUM_CARD_SHUFFLES = 32

; Current position in the deck. Increases after each card is drawn
var gCardDeckPosition = 0

; Convert a card type/number into a string
func card_numToName(cardType: int) -> string
    return "No card"    if cardType is NO_CARD
    return "Ace"        if cardType is CARD_ACE
    return "2"          if cardType is CARD_2
    return "3"          if cardType is CARD_3
    return "4"          if cardType is CARD_4
    return "5"          if cardType is CARD_5
    return "6"          if cardType is CARD_6
    return "7"          if cardType is CARD_7
    return "8"          if cardType is CARD_8
    return "9"          if cardType is CARD_9
    return "10"         if cardType is CARD_10
    return "Jack"       if cardType is CARD_JACK
    return "Queen"      if cardType is CARD_QUEEN
    return "King"       if cardType is CARD_KING

    ; Shouldn't reach here
    return "Unknown Card Type"
end

; Shuffles up the card deck
func card_shuffleCards()
    ; Begin swapping each card randomly with other cards in the array.
    ; Do this NUM_CARD_SHUFFLES times.
    var shuffleNum = 0

    while shuffleNum < NUM_CARD_SHUFFLES
        var cardNum = 0

        while (cardNum < 52)
            ; Get the card to swap with the current card and do the swap
            var swapTarget = rand() % 52
            var tmpCard = gCardDeck[cardNum]
            gCardDeck[cardNum] = gCardDeck[swapTarget]
            gCardDeck[swapTarget] = tmpCard
    
            cardNum++   ; Move onto the next card
        end

        shuffleNum++    ; Next shuffle iteration
    end
end

; Initializes the card deck and shuffles the cards. Called at the start of each game.
func card_initializeDeck()
     ; Call the shuffle routine to randomly shuffle the cards and set the next card to be
     ; drawn from the deck from the top of the deck.
     card_shuffleCards()
     gCardDeckPosition = 0
end

; Gives an empty suit of cards
func card_getEmptySuit() -> [5]int
    return [ NO_CARD, NO_CARD, NO_CARD, NO_CARD, NO_CARD ]
end

; Get the length (number of cards) in a player or dealer suit
func card_getSuitLength(suitOfCards: [5]int) -> int
    var suitLength = 0
    
    while suitLength < 5 and suitOfCards[suitLength] is not NO_CARD
        suitLength++
    end
    
    return suitLength
end

; Draw a card from the deck of cards
func card_drawCard() -> int
    return NO_CARD if gCardDeckPosition >= 52
    var drawnCard = gCardDeck[gCardDeckPosition]
    gCardDeckPosition++
    return drawnCard
end

; Gets the best value of a player's / dealer's hand
func card_getSuitValue(suitOfCards: [5]int) -> int
    ; Get how many cards are actually in the suit first
    var suitLength = card_getSuitLength(suitOfCards)
    
    ; Calculate suit value- counting aces's initially as having a value of 1
    ; Aces are wildcards that can either be '1' or '11'
    var suitValue = 0

    scope
        var cardNum = 0

        while cardNum < suitLength
            var card = suitOfCards[cardNum]

            if card is CARD_ACE 
                suitValue += 1 
            or if card is CARD_2 
                suitValue += 2 
            or if card is CARD_3 
                suitValue += 3 
            or if card is CARD_4 
                suitValue += 4 
            or if card is CARD_5 
                suitValue += 5 
            or if card is CARD_6 
                suitValue += 6 
            or if card is CARD_7 
                suitValue += 7
            or if card is CARD_8 
                suitValue += 8 
            or if card is CARD_9
                suitValue += 9 
            or if card is CARD_10 
                suitValue += 10 
            or if card is CARD_KING 
                suitValue += 10 
            or if card is CARD_QUEEN 
                suitValue += 10 
            or if card is CARD_JACK 
                suitValue += 10 
            end

            cardNum++
        end
    end
    
    ; Now cycle through the suit again, this time add 10 to the value if an
    ; ace is encountered and it doesn't cause the overall value to go over 21.
    scope
        var cardNum = 0

        while cardNum < suitLength
            ; Grab the current card and ignore if not an ace
            var card = suitOfCards[cardNum]
            
            if card is CARD_ACE
                ; Came across an ace:
                ; Check if counting the ace as an 11 causes the suit value to go over 21.
                ; If not: add 10 to the value of the suit (note, we've already '1' for this cards value)
                if suitValue + 10 <= GAME_BLACKJACK_SUIT_VALUE
                    ; Counting the ace as 11 does not cause suit to go bust. 
                    ; Add 10 to the value to count it as such
                    suitValue += 10
                end
            end

            cardNum++
        end
    end
    
    ; Return the suit's best value
    return suitValue
end

;==================================================================================================
; General game stuff
;==================================================================================================

; Minimum bet that can be made
var GAME_MIN_BET = 20

; Maximum amount of cards that can be drawn in game
var GAME_MAX_CARDS = 5

; The value of a suit of cards when you have a blackjack
var GAME_BLACKJACK_SUIT_VALUE = 21

; Winners / losers of game
var GAME_WINNER_PLAYER = 0      ; Player wins game
var GAME_WINNER_DEALER = 1      ; Dealer wins game
var GAME_WINNER_NONE = 2        ; Draw

; Game types
var GAME_TYPE_NORMAL = 0        ; Show dealer cards
var GAME_TYPE_ADVANCED = 1      ; Don't show dealer cards

; Actions a player / dealer can take
; Stored as bit flags so they can be used as bit flags when determining
; what actions are possible for the player at any given time.
var GAMEACTION_NONE = 0
var GAMEACTION_HIT = 1 << 0
var GAMEACTION_STAND = 1 << 1
var GAMEACTION_DOUBLEDOWN = 1 << 2  ; Player only action
var GAMEACTION_FORFEIT = 1 << 3     ; Player only action

; The current type of game (GAME_TYPE_XXX constants)
var gGameCurrentGameType = GAME_TYPE_NORMAL

; Who won the last game (GAME_WINNER_XXX constants)
var gGameWinner = GAME_WINNER_NONE

; Starts up the game
func game_startGame(betAmount: int)
    ; Set the players bet amount and subtract from overall chips
    player_makeBet(betAmount)
     
    ; Initialise the card deck
    card_initializeDeck()
     
    ; Clear the player and dealer's suit of cards
    player_clearCards()
    dealer_clearCards()
    
    ; Deal (HIT) two cards to the player and dealer
    dealer_actionHit()
    player_actionHit()
    dealer_actionHit()
    player_actionHit()
     
    ; Begin the main game loop
    game_doGameLoop()
end

; Tells if the game is finished
func game_isOver() -> bool
    return player_handFinished() and dealer_handFinished()
end

; Draw the main game screen
func game_drawMainGameScreen()
    ; Draw a title bar with the text 'players hand'
    menu_drawTitleBar("Player's hand")
     
    ; Draw the amount the player has bet
    printPrefixTxtAndAmtLn("Bet amount: ", gPlayerBetChips)
     
    ; Draw the players cards
    nextln()
    nextln()
    game_drawCards(gPlayerCards)
     
    ; Draw the player's suit value:
    printPrefixTxtAndAmtLn("Suit Value: ", card_getSuitValue(gPlayerCards))

    ; Draw a title bar with the text 'dealers hand'
    menu_drawTitleBar("Dealer's hand")
     
    ; Only draw the dealer cards if on normal game type or if the game is over
    if gGameCurrentGameType is GAME_TYPE_NORMAL or game_isOver()
        ; Draw the dealers cards
        game_drawCards(gDealerCards)
         
        ; Draw the dealer's suit value:
        printPrefixTxtAndAmtLn("Suit Value: ", card_getSuitValue(gDealerCards))
    else
        ; Advanced game type: draw an **unavailable** message
        println("*** NOT AVAILABLE ***")
    end

    ; If the game is not over- draw the possible actions the player can take, otherwise draw the results of the game.
    unless game_isOver()
        game_drawPlayerActions()
    else
        game_drawEndGameResults()
    end
end

; Draw the actions available to the player
func game_drawPlayerActions()
    menu_drawTitleBar("Actions available: ")

    if player_areActionsAvailable(GAMEACTION_HIT)
        println("1 - Hit")
    end
    
    if player_areActionsAvailable(GAMEACTION_STAND)
        println("2 - Stand")
    end
    
    if player_areActionsAvailable(GAMEACTION_DOUBLEDOWN)
        println("3 - Double down")
    end
    
    if player_areActionsAvailable(GAMEACTION_FORFEIT)
        println("4 - Quit (bet is forfeit)")
    end
    
    nextln()
    println("Input desired action: ")
end

; Draw the results at the end of a game
func game_drawEndGameResults()
    menu_drawTitleBar("Game over! Final results:")
    print("Game result: ")

    if gGameWinner is GAME_WINNER_PLAYER
        println("Player wins.")
    or if gGameWinner is GAME_WINNER_DEALER
        println("Dealer wins.")
    else
        println("Game was a draw.")
    end
 
    print("Money lost / gained: ")

    if gGameWinner is GAME_WINNER_PLAYER
        print("Gained ")
        print(((gPlayerBetChips * 3) / 2) - gPlayerBetChips)
        println(" chips.")
    or if gGameWinner is GAME_WINNER_DEALER
        print("Lost ")
        print(gPlayerBetChips)
        println(" chips.")
    else
        println("No money lost or gained.")
    end

    doEnterNumToContinue()
end

; Draw the given suit of cards
func game_drawCards(suitOfCards: [5]int)
    var suitLength = card_getSuitLength(suitOfCards)
    var cardNum = 0

    while cardNum < suitLength
        print("Card ")
        print(cardNum + 1)
        print(": ")
        print(card_numToName(suitOfCards[cardNum]))
        nextln()
        cardNum++
    end
end

; Does the main game loop
func game_doGameLoop()
    ; Play out the player's hand first.
    until player_handFinished()
        player_findAvailableActions()   ; Find the available actions to the player
        game_drawMainGameScreen()       ; Draw the main game screen
        player_doNextGameAction()       ; Ask the player for next action
    end

    ; Play out the dealers hand
    until dealer_handFinished()
        ; Do the an action for the dealer. Note: not updating screen till the end since this is almost instant
        dealer_doAction()
    end
    
    ; Game now over- call the end game function
    game_endGame()
end

; Finishes up the game, determines the winner and does payouts 
func game_endGame()
    ; First thing which must be done: find out who has won..
    game_findWinner()

    ; Pay out to the player if s/he has won, or refund if drawn
    game_payOutChips()

    ; Record the end game results in the statistics
    if gGameWinner is GAME_WINNER_PLAYER 
        ; Player has won the game: increment amount of games won and money won
        gGameStatGamesWon++
        gGameStatMoneyGained += gPlayerBetChips / 2
    or if gGameWinner is GAME_WINNER_DEALER
        ; Dealer has won the game: increment amount of games lost and money lost
        gGameStatGamesLost++
        gGameStatMoneyLost += gPlayerBetChips
    else
        ; Game was a draw: Increment amount of games drew
        gGameStatGamesDrew++
    end

    ; Draw the game screen. This function will automatically output the game results also.
    game_drawMainGameScreen()
end

; Figures out the winner of the game
func game_findWinner()
    ; Declare two bools to hold whether player or dealer has lost.
    ; Both can win or lose at the same time- which will result in a draw
    var playerWon = false
    var dealerWon = false

    ; Get the value of the player's and dealer's suits
    var playerSuitValue = card_getSuitValue(gPlayerCards)
    var dealerSuitValue = card_getSuitValue(gDealerCards)
    
    ; Check if the player has a better suit than the dealer, and is not
    ; gone bust. Also check if the dealer is bust. If so, the player has 'won'
    unless player_isBust()
        if playerSuitValue > dealerSuitValue or dealer_isBust()
            playerWon = true
        end
    end
     
    ; Check if the dealer has a better suit than the player, and is not
    ; gone bust. Also check if the player is bust. If so, the dealer has 'won'
    unless dealer_isBust()
        if dealerSuitValue > playerSuitValue or player_isBust()
            dealerWon = true
        end
    end

    ; If the player has forfeit, set the player to have lost and the dealer
    ; to have won regardless of what the cards are:
    if player_hasForfeit()
        playerWon = false
        dealerWon = true
    end
     
    ; Now set the final result. If both player and dealer had the same result then the overall
    ; result will be a draw...
    if playerWon
        unless dealerWon 
            gGameWinner = GAME_WINNER_PLAYER
        else
            gGameWinner = GAME_WINNER_NONE
        end
    else
        unless dealerWon 
            gGameWinner = GAME_WINNER_NONE
        else
            gGameWinner = GAME_WINNER_DEALER
        end
    end
end

; Pay out chips at the end of a game to the winner (unless there is a draw)
func game_payOutChips()
    if gGameWinner is GAME_WINNER_PLAYER
        ; Add 1.5 times the bet amount to the players chips. In other words, the player gets the
        ; original bet back, plus half the bet in winnings.
        gPlayerChips += (gPlayerBetChips * 3) / 2
    or if gGameWinner is GAME_WINNER_DEALER
        ; Dealer has won. Don't give back anything...
        nop
    else
        ; Player has drawn with the dealer: Give back original bet amount.
        gPlayerChips += gPlayerBetChips
    end
end

;==================================================================================================
; Game stat stuff
;==================================================================================================

var gGameStatGamesWon = 0       ; Number of games the player has won
var gGameStatGamesLost = 0      ; Number of games the player has lost
var gGameStatGamesDrew = 0      ; Number of games the player drew
var gGameStatMoneyInput = 0     ; Total amount of money the player has put into this game
var gGameStatMoneyGained = 0    ; Total amount gained on bets
var gGameStatMoneyLost = 0      ; Total amount lost on bets

;==================================================================================================
; Dealer related stuff
;==================================================================================================

; The dealer's suit of 5 cards
var gDealerCards = [ NO_CARD, NO_CARD, NO_CARD, NO_CARD, NO_CARD ]

; Last action the dealer took on the hand
var gDealerLastAction = GAMEACTION_NONE

; Clear the dealer's suit of cards
func dealer_clearCards()
    gDealerCards = card_getEmptySuit()
end

; Finds out if the dealer has gone bust (suitValue > 21)
func dealer_isBust() -> bool
    return card_getSuitValue(gDealerCards) > GAME_BLACKJACK_SUIT_VALUE
end

; Tells if the dealer has drawn 5 cards and can't draw any more
func dealer_cantDraw() -> bool
    return card_getSuitLength(gDealerCards) >= GAME_MAX_CARDS
end

; Tells if the dealer has issued a stand order
func dealer_isStanding() -> bool
    return gDealerLastAction is GAMEACTION_STAND
end

; Tells if the dealers hand is finished
func dealer_handFinished() -> bool
    return  
        dealer_isBust() or      ; If the dealer is bust then his/her hand is finished
        dealer_cantDraw() or    ; If the dealer can't draw any more, then the hand is finished
        dealer_isStanding()     ; If the dealer's last action was stand, then the hand is finished.
end

; Does an action for the dealer
func dealer_doAction()
    ; Get the suit values for both dealer and player
    var dealerSuitValue = card_getSuitValue(gDealerCards)
    var playerSuitValue = card_getSuitValue(gPlayerCards)
    
    ; Decide whether to hit or stand
    if dealerSuitValue >= 17
        ; Dealers suit value is >= 17. Normally a dealer will stand on this, but the dealer must first
        ; check if the player has got a better hand before standing.
        if playerSuitValue > dealerSuitValue
            ; Player has a greater suit value. If the player is not bust, then the dealer must try and hit
            ; again in order to attempt beating the player.
            if player_isBust()
                ; The player has gone bust. Dealer can safely stand and win the game
                dealer_actionStand()
            else
                ; The player hasn't gone bust and has a better hand than the dealer. The dealer must make
                ; another hit in order to have some chance of winning.
                dealer_actionHit()
            end
        else
            ; Player's suit value is less than the dealer. The dealer should now stand at this point.
            ; Will be too risky drawing another card!
            dealer_actionStand()
        end
    or if player_hasForfeit()
        ; Player has given up on the game. No point in drawing any further
        ; cards. Order dealer to stand....
        dealer_actionStand()
    or if player_isBust()
        ; The player has gone bust. Draw no more cards and stand.
        dealer_actionStand()
    or if playerSuitValue < dealerSuitValue
        ; If the player has stood on a lower value than what the dealer currently has, then there is no point
        ; in drawing any more cards. Stand...
        dealer_actionStand()
    else
        ; All other standing conditions have not been met. Draw another card.
        dealer_actionHit()
    end
end

; Makes the dealer stand
func dealer_actionStand()
    gDealerLastAction = GAMEACTION_STAND
end

; Makes the dealer draw another card
func dealer_actionHit()
    var card = card_drawCard()
    gDealerCards[card_getSuitLength(gDealerCards)] = card
    gDealerLastAction = GAMEACTION_HIT
end

;==================================================================================================
; Player related stuff
;==================================================================================================

; Current balance of chips the player has
var gPlayerChips = 0

; Amount of chips the player has currently bet
var gPlayerBetChips = 0

; The player's suit of 5 cards
var gPlayerCards = [ NO_CARD, NO_CARD, NO_CARD, NO_CARD, NO_CARD ]

; Last action the player took on the hand
var gPlayerLastAction = GAMEACTION_NONE

; What actions are possible at any given time
var gPlayerAvailableActions = GAMEACTION_NONE

; Make the player buy some chips and add to the usable chip balance in the game
func player_buyChips(numChips: int)
    gPlayerChips += numChips
    gGameStatMoneyInput += numChips
end

; Casts the player's current bet and sets aside the bet money
func player_makeBet(betAmount: int)
    gPlayerChips -= betAmount
    gPlayerBetChips = betAmount
end

; Clear the player's suit of cards
func player_clearCards()
    gPlayerCards = card_getEmptySuit()
end

; Finds out if the player has gone bust (suitValue > 21)
func player_isBust() -> bool
    return card_getSuitValue(gPlayerCards) > GAME_BLACKJACK_SUIT_VALUE
end

; Tells if the player has drawn 5 cards and can't draw any more
func player_cantDraw() -> bool
    return card_getSuitLength(gPlayerCards) >= GAME_MAX_CARDS
end

; Tells if the player has issued a stand order
func player_isStanding() -> bool
    return gPlayerLastAction is GAMEACTION_STAND
end

; Tells whether the player has forfeited the game
func player_hasForfeit() -> bool
    return gPlayerLastAction is GAMEACTION_FORFEIT
end

; Tells if the player has got 21, or a blackjack
func player_hasBlackjack() -> bool
    return card_getSuitValue(gPlayerCards) is GAME_BLACKJACK_SUIT_VALUE
end

; Tells if the player's hand is finished
func player_handFinished() -> bool
    return
        player_isBust() or      ; If the player is bust then his/her hand is finished
        player_cantDraw() or    ; If the player can't draw any more, then the hand is finished
        player_isStanding() or  ; If the player's last action was stand, then the hand is finished.
        player_hasForfeit() or  ; If the player has forfeited then the hand is finished too
        player_hasBlackjack()   ; If the player has a blackjack (perfect suit) then auto end the hand
end

; Figures out what actions are available to the player
func player_findAvailableActions()
    ; Reset the available actions to none initially
    gPlayerAvailableActions = GAMEACTION_NONE

    ; Stand, hit and forfeit are always available until the game ends, the
    ; player is standing or if the player can't draw any more
    unless game_isOver()
        unless player_isStanding() or player_cantDraw()
            ; Game is still on. Set the bit flags for these options to 1
            gPlayerAvailableActions |= GAMEACTION_STAND
            gPlayerAvailableActions |= GAMEACTION_FORFEIT
            gPlayerAvailableActions |= GAMEACTION_HIT
        end
    end
     
    ; Only allow double down if on first two cards and can afford it, and if not standing.
    var numPlayerCards = card_getSuitLength(gPlayerCards)
    
    if numPlayerCards is 2
        if gPlayerChips >= gPlayerBetChips
            unless player_isStanding()
                ; Criteria met for this action: make available
                gPlayerAvailableActions |= GAMEACTION_DOUBLEDOWN
            end
        end
    end
end

; Tell if one of the player actions (passed as a bitmask) are available
func player_areActionsAvailable(actionsMask: int) -> bool
    return gPlayerAvailableActions & actionsMask != 0
end

; Reads the next action for the player to do during the game
func player_doNextGameAction()
    ; Read the action for the player to do
    ; 1 = hit, 2 = stand, 3 = double down, 4 = forfeit
    var playerAction = readnum()

    ; See what action the player requested and perform it if possible
    if playerAction is 1 and player_areActionsAvailable(GAMEACTION_HIT)
        player_actionHit()
    or if playerAction is 2 and player_areActionsAvailable(GAMEACTION_STAND)
        player_actionStand()
    or if playerAction is 3 and player_areActionsAvailable(GAMEACTION_DOUBLEDOWN)
        player_actionDoubleDown()
    or if playerAction is 4 and player_areActionsAvailable(GAMEACTION_FORFEIT)
        player_actionForfeit()
    else
        println("Invalid action input!")
    end
end

; Make the player stand
func player_actionStand()
    gPlayerLastAction = GAMEACTION_STAND
end

; Make the player forfeit the game
func player_actionForfeit()
    gPlayerLastAction = GAMEACTION_FORFEIT
end

; Makes the player draw another card
func player_actionHit()
    var card = card_drawCard()
    gPlayerCards[card_getSuitLength(gPlayerCards)] = card
    gPlayerLastAction = GAMEACTION_HIT
end

; Makes the player draw another card and double the bet
func player_actionDoubleDown()
    ; Draw another card
    player_actionHit()
    
    ; Take original bet away from available chips - bet has doubled
    gPlayerChips -= gPlayerBetChips

    ; Double the amount of bet chips
    gPlayerBetChips *= 2
    
    ; Set the last action as STAND, because the player MUST stand and draw
    ; no more cards after making a double down
    gPlayerLastAction = GAMEACTION_STAND
end

;==================================================================================================
; Menu related stuff 
;==================================================================================================

var gDisplayMenu = true     ; Continue displaying the main menu?

; Draws a title bar for the menu
func menu_drawTitleBar(titleText: string)
    nextln()
    println("*************************************************")
    println(titleText)
    println("*************************************************")
    nextln()
end

; Display statistics
func menu_displayStatistics()
    menu_drawTitleBar("GAME STATISTICS")
     
    ; Calculate the total games played
    var totalGamesPlayed = gGameStatGamesWon
    totalGamesPlayed += gGameStatGamesLost
    totalGamesPlayed += gGameStatGamesDrew

    ; Calculate total gained / lost
    var netEarnings = gGameStatMoneyGained - gGameStatMoneyLost

    ; Calculate how many chips the player currently has as a percentage of how much they have bought. 
    ; This gives an earning metric of sorts...
    ; If money input is currently zero then set as 100, don't divide by zero!
    var percentOfChipsBought = 0

    if gGameStatMoneyInput > 0
        ; Have input some money. Calculate percentage as normal
        percentOfChipsBought = (gPlayerChips * 100) / gGameStatMoneyInput
    else
        ; No money input- leave percent of original chips left as 100%
        percentOfChipsBought = 100
    end
     
    ; Display the actual stats
    println("--- STATISTICS ---")
    nextln()

    printPrefixTxtAndAmtLn("Games played: ", totalGamesPlayed)
    printPrefixTxtAndAmtLn("Games won: ", gGameStatGamesWon)
    printPrefixTxtAndAmtLn("Games lost: ", gGameStatGamesLost)
    printPrefixTxtAndAmtLn("Games drawn: ", gGameStatGamesDrew)
    nextln()

    printPrefixTxtAndAmtLn("Chips bought: ", gGameStatMoneyInput)
    printPrefixTxtAndAmtLn("Chips gained: ", gGameStatMoneyGained)
    printPrefixTxtAndAmtLn("Chips lost: ", gGameStatMoneyLost)
    nextln()

    printPrefixTxtAndAmtLn("Net earnings / loss: ", netEarnings)
    printPrefixTxtAndAmtLn("% of chips bought left: ", percentOfChipsBought)
    nextln()
    
    doEnterNumToContinue()
end

; Display a warning when the player doesn't have enough to play
func menu_displayNotEnoughMoneyWarning()
    menu_drawTitleBar("INSUFFICIENT FUNDS")

    println("You do not have enough chips to play.")
    println("Please purchase more chips in order to play.")
    printPrefixTxtAndAmtLn("Minimum number of chips needed is: ", GAME_MIN_BET)
    printPrefixTxtAndAmtLn("Amount of chips you have: ", gPlayerChips)
    
    doEnterNumToContinue()
end

; Display a warning when the player hasn't bet enough
func menu_displayBetTooSmallWarning(betAmount: int)
    menu_drawTitleBar("INVALID BET AMOUNT")

    println("You have entered an invalid bet amount!")
    println("You must have the minimum amount of chips needed to play and not bet more than what you have.")
    nextln()

    printPrefixTxtAndAmtLn("Minimum number of chips needed is: ", GAME_MIN_BET)
    printPrefixTxtAndAmtLn("You bet: ", betAmount)
    printPrefixTxtAndAmtLn("You have: ", gPlayerChips)
    
    doEnterNumToContinue()
end

; Ask the player to add money to the player's count
func menu_getMoney()
    ; Ask for money amount
    menu_drawTitleBar("BUY GAME CHIPS")
    
    println("Please input the amount of chips to buy.")
    println("Enter '0' or less to abort.")
    nextln()

    printPrefixTxtAndAmtLn("Minium play amount in chips is: ", GAME_MIN_BET)
    printPrefixTxtAndAmtLn("Current amount of chips: ", gPlayerChips)
    nextln()

    print("Enter amount of chips to buy: ")

    ; Read the amount to buy, if <= 0 then it means the player cancelled
    var buyAmount = readnum()
    return if buyAmount <= 0

    ; Add to the player's balance of chips and the total amount of money input
    player_buyChips(buyAmount)
    
    ; Display the new total to the user
    printPrefixTxtAndAmtLn("New amount of chips: ", gPlayerChips)
    doEnterNumToContinue()
end

; Asks the player to play another game after playing one
func menu_askAnotherGame() -> bool
    ; Prompt the user
    menu_drawTitleBar("Play another game?")
    printPrefixTxtAndAmtLn("Chips left: ", gPlayerChips)
    print("Play another game? Enter >= 1 for 'yes' or <= 0 for 'no': ")
     
    ; Return whether the user answered yes or no
    return readnum() >= 1
end

; Ask the player for the bet amount to start the game.
; If the correct amount is entered then the game starts.
func menu_getBet()
    ; Continue looping one of several conditions occurs:
    ;   1 - The player decides to quit (enters 0 or less)
    ;   2 - The player no longer has enough cash for minimum bet amount
    ;   3 - The player does not want another game           
    loop
        ; Ask for the bet amount
        menu_drawTitleBar("ENTER BET AMOUNT")
        
        println("Please enter bet amount for this game.")
        println("Enter 0 or less to return back to the main menu.")
        nextln()

        printPrefixTxtAndAmtLn("Minimum bet: ", GAME_MIN_BET)
        printPrefixTxtAndAmtLn("Chips available: ", gPlayerChips)
         
        ; Get the bet amount
        var betAmount = readnum()

        ; If bet amount is <= then the user wants to quit
        break if betAmount <= 0

        ; If the user doesn't enter enough for the minimum bet then 
        ; display a warning and loop around to ask again
        if betAmount < GAME_MIN_BET
            menu_displayBetTooSmallWarning(betAmount)
            next
        end

        ; Begin the game loop with the bet amount
        game_startGame(betAmount)

        ; If the user doesn't have enough to play the next game or doesnt
        ; want to play then don't play another game
        break unless gPlayerChips >= GAME_MIN_BET
        break unless menu_askAnotherGame()
    end
end

; Displays the main menu and reads menu choices.
func menu_displayMain()
    while gDisplayMenu
        ; Display the menu
        menu_drawTitleBar("BLACKJACK - MAIN MENU")

        print("Chips available to play: ")
        print(gPlayerChips)
        print("\n\n")

        print("1 - New game (normal)\n"
              "2 - New game (advanced)\n"
              "3 - Exchange money for chips\n"
              "4 - Statistics\n"
              "5 - quit\n"
              "\n"
              "Input choice and press enter: ")

        ; Ask the player for input
        var choice = readnum()

        if choice is 1 or choice is 2
            ; User wants to play a game. Make sure we have the minimum bet amount first:
            if gPlayerChips < GAME_MIN_BET
                menu_displayNotEnoughMoneyWarning()
            else
                ; Have enough to play, set the game mode:
                if choice is 1
                    gGameCurrentGameType = GAME_TYPE_NORMAL
                else
                    gGameCurrentGameType = GAME_TYPE_ADVANCED
                end

                ; Ask the player for the bet and start the game
                menu_getBet()
            end
        or if choice is 3
            menu_getMoney()
        or if choice is 4
            menu_displayStatistics()
        or if choice is 5
            gDisplayMenu = false
        else
            println("Invalid menu choice, try again!")
        end
    end
end

;==================================================================================================
; Main program entry point
;==================================================================================================
func main() -> int
    ; Seed the random number generator to the current time (in seconds) and begin the menu loop
    srand(time())
    menu_displayMain()

    ; Program executed successfully, return 0 to indicate that
    return 0
end
