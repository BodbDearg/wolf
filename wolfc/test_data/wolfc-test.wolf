;==================================================================================================
; Utility functions
;==================================================================================================
func println(string text)
	print(text)
	print("\n")
end

func nextln()
	print("\n")
end

func doEnterNumToContinue()
	println("Enter a number to continue...")
	readnum()
end

;==================================================================================================
; General game stuff
;==================================================================================================

; Minimum bet that can be made
var GAME_MIN_BET = 20

;==================================================================================================
; Game stat stuff
;==================================================================================================

; Total amount of money the player has put into this game by exchanging money for chips
var gGameStatMoneyInput = 0

;==================================================================================================
; Player related stuff
;==================================================================================================

; Current balance of chips the player has. 1 chip = 1 EUR
var gPlayerChips = 0

;==================================================================================================
; Menu related stuff 
;==================================================================================================

; Continue displaying the main menu?
var gDisplayMenu = true

func menu_drawTitleBar(string titleText)
    nextln()
    println("*************************************************")
    println(titleText)
    println("*************************************************")
    nextln()
end

; Ask the player to add money to the player's count
func menu_getMoney()
    ; Ask for money amount
    menu_drawTitleBar("BUY GAME CHIPS")
    
    println("Please input an amount to be exchanged for chips.")
	println("One Euro corresponds to one game chip.")
	println("Enter '0' or less to abort.")

    print("Minium play amount is: EUR ")
	print(GAME_MIN_BET)
	nextln()

	print("Current amount of chips: ")
	print(gPlayerChips)
	nextln()

	print("Enter amount to exchange (EUR): ")
    
    ; Read the amount to exchange and add to player balance,
    ; if <= 0 then it means the player cancelled
    var exchangeAmount = readnum()
    return if exchangeAmount <= 0

    ; Add to the player's balance of chips and the total amount of money input
    gPlayerChips += exchangeAmount
    gGameStatMoneyInput += exchangeAmount

    ; Display the new total to the user
    print("New amount of chips: ")
    print(gPlayerChips)
    nextln()
    doEnterNumToContinue()
end

; Displays the main menu and reads menu choices
func menu_displayMain()
	while gDisplayMenu
		; Display the menu
		menu_drawTitleBar("BLACKJACK - MAIN MENU")

		print("Chips available to play: ")
		print(gPlayerChips)
		print("\n\n")

		print("1 - New game (normal)\n"
              "2 - New game (advanced)\n"
              "3 - Exchange money for chips\n"
              "4 - Statistics\n"
              "5 - quit\n"
              "\n"
              "Input choice and press enter: ")

		; Ask the player for input
		var choice = readnum()

		if choice == 1
			println("NOT IMPLEMENTED YET!!")
		or if choice == 2
			println("NOT IMPLEMENTED YET!!")
		or if choice == 3
			menu_getMoney()
		or if choice == 4
			println("NOT IMPLEMENTED YET!!")
		or if choice == 5
			gDisplayMenu = false
		else
			println("Invalid menu choice, try again!")
		end
	end
end

;==================================================================================================
; Main program entry point
;==================================================================================================
func main() -> int
	; Seed the random number generator to the current time (in seconds) and begin the menu loop
	srand(time())
	menu_displayMain()

	; Program executed successfully, return 0 to indicate that
	return 0
end
