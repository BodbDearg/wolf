;==================================================================================================
; PostfixExpr
;==================================================================================================
func testPostfixExprFuncCall1() -> int
    return 5
end

func testPostfixExprFuncCall2(v: int) -> int
    return v * 5
end

func testPostfixExprFuncCall3(v: [3]int) -> [3]int
    return [ 
        v[0] * 5,
        v[1] * 5,
        v[2] * 5
    ]
end

func testPostfixExprFuncCall4(v: [3]int) -> [3]int
    return v
end

func testPostfixExprFuncCall5(v1: int, v2: int, v3: int) -> int
    return v1 * v2 * v3
end

let testPostfixExprConstexpr = [
    [1, 2, 3][2] == 3,
    [1, 2, 3][0] == 1
]

func testPostfixExpr()
    ; Increment and decrement
    let i = 0
    i++ 
    assert(i == 1)
    i++
    assert(i == 2)
    i--
    assert(i == 1)
    i--
    assert(i == 0)
    i--
    assert(i == -1)

    ; Function calls
    assert(testPostfixExprFuncCall1() == 5)
    assert(testPostfixExprFuncCall1() == testPostfixExprFuncCall1())
    assert(testPostfixExprFuncCall2(5) == 25)
    assert(testPostfixExprFuncCall3([1, 2, 3])[0] == 5)
    assert(testPostfixExprFuncCall3([1, 2, 3])[1] == 10)
    assert(testPostfixExprFuncCall3([1, 2, 3])[2] == 15)
    assert(testPostfixExprFuncCall4([1, 2, 3])[2] == 3)
    assert(testPostfixExprFuncCall5(1, 2, 3) == 6)
    
    ; Array indexing
    let array1 = [ 1, 2, 3, 4]
    assert(array1[0] == 1)
    assert(array1[1] == 2)
    assert(array1[3] == 4)
    array1[1] = 99
    assert(array1[1] == 99)

    let array2 = [[1, 2], [3, 4], [5, 6]]
    assert(array2[1][0] == 3)
    assert(array2[1][1] == 4)
    assert(array2[2][1] == 6)
    array2[1] = [7, 8]
    assert(array2[1][0] == 7)
    assert(array2[1][1] == 8)

    assert(testPostfixExprConstexpr[0])
    assert(testPostfixExprConstexpr[1])
end

func main() -> int
    testPostfixExpr()
    return 0
end
