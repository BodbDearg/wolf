;==================================================================================================
; Utility functions
;==================================================================================================
func println(string text)
    print(text)
    print("\n")
end

func nextln()
    print("\n")
end

func printPrefixTxtAndAmtLn(string text, int amount)
    print(text)
    print(amount)
    nextln()
end

;--------------------------------------------------------------------------------------------------
; This utility slows down things and asks the user to input a number (any number) before proceeding
; with the rest of the program. Useful for pausing after new information is shown.
;--------------------------------------------------------------------------------------------------
func doEnterNumToContinue()
    println("Enter a number to continue...")
    readnum()
end

;==================================================================================================
; General game stuff
;==================================================================================================

; Minimum bet that can be made
var GAME_MIN_BET = 20

; Game types
var GAME_TYPE_NORMAL = 0        ; Show dealer cards
var GAME_TYPE_ADVANCED = 1      ; Don't show dealer cards

; The current game type
var gGameCurrentGameType = GAME_TYPE_NORMAL

;==================================================================================================
; Game stat stuff
;==================================================================================================

var gGameStatGamesWon = 0       ; Number of games the player has won
var gGameStatGamesLost = 0      ; Number of games the player has lost
var gGameStatGamesDrew = 0      ; Number of games the player drew
var gGameStatMoneyInput = 0     ; Total amount of money the player has put into this game
var gGameStatMoneyGained = 0    ; Total amount gained on bets
var gGameStatMoneyLost = 0      ; Total amount lost on bets

;==================================================================================================
; Player related stuff
;==================================================================================================

var gPlayerChips = 0        ; Current balance of chips the player has. 1 chip = 1 EUR

;==================================================================================================
; Menu related stuff 
;==================================================================================================

var gDisplayMenu = true     ; Continue displaying the main menu?

;--------------------------------------------------------------------------------------------------
; Draws a title bar for the menu
;--------------------------------------------------------------------------------------------------
func menu_drawTitleBar(string titleText)
    nextln()
    println("*************************************************")
    println(titleText)
    println("*************************************************")
    nextln()
end

;--------------------------------------------------------------------------------------------------
; Display statistics
;--------------------------------------------------------------------------------------------------
func menu_displayStatistics()
    menu_drawTitleBar("GAME STATISTICS")
     
    ; Calculate the total games played
    var totalGamesPlayed = gGameStatGamesWon
    totalGamesPlayed += gGameStatGamesLost
    totalGamesPlayed += gGameStatGamesDrew

    ; Calculate total gained / lost
    var netEarnings = gGameStatMoneyGained - gGameStatMoneyLost

    ; Calculate how many chips the player currently has as a percentage of how much they have bought. 
    ; This gives an earning metric of sorts...
    ; If money input is currently zero then set as 100, don't divide by zero!
    var percentOfChipsBought = 0

    if gGameStatMoneyInput > 0
        ; Have input some money. Calculate percentage as normal
        percentOfChipsBought = (gPlayerChips * 100) / gGameStatMoneyInput
    else
        ; No money input- leave percent of original chips left as 100%
        percentOfChipsBought = 100
    end
     
    ; Display the actual stats
    println("--- STATISTICS ---")
    nextln()

    printPrefixTxtAndAmtLn("Games played: ", totalGamesPlayed)
    printPrefixTxtAndAmtLn("Games won: ", gGameStatGamesWon)
    printPrefixTxtAndAmtLn("Games lost: ", gGameStatGamesLost)
    printPrefixTxtAndAmtLn("Games drawn: ", gGameStatGamesDrew)
    nextln()

    printPrefixTxtAndAmtLn("Chips bought: ", gGameStatMoneyInput)
    printPrefixTxtAndAmtLn("Chips gained: ", gGameStatMoneyGained)
    printPrefixTxtAndAmtLn("Chips lost: ", gGameStatMoneyLost)
    nextln()

    printPrefixTxtAndAmtLn("Net earnings / loss: ", netEarnings)
    printPrefixTxtAndAmtLn("% of chips bought left: ", percentOfChipsBought)
    nextln()
    
    doEnterNumToContinue()
end

;--------------------------------------------------------------------------------------------------
; Display a warning when the player doesn't have enough to play
;--------------------------------------------------------------------------------------------------
func menu_displayNotEnoughMoneyWarning()
    menu_drawTitleBar("INSUFFICIENT FUNDS")

    println("You do not have enough chips to play.")
    println("Please purchase more chips in order to play.")
    printPrefixTxtAndAmtLn("Minimum number of chips needed is: ", GAME_MIN_BET)
    printPrefixTxtAndAmtLn("Amount of chips you have: ", gPlayerChips)
    
    doEnterNumToContinue()
end

;--------------------------------------------------------------------------------------------------
; Display a warning when the player hasn't bet enough
;--------------------------------------------------------------------------------------------------
func menu_displayBetTooSmallWarning(int betAmount)
    menu_drawTitleBar("INVALID BET AMOUNT")

    println("You have entered an invalid bet amount!")
    println("You must have the minimum amount of chips needed to play and not bet more than what you have.")
    nextln()

    printPrefixTxtAndAmtLn("Minimum number of chips needed is: ", GAME_MIN_BET)
    printPrefixTxtAndAmtLn("You bet: ", betAmount)
    printPrefixTxtAndAmtLn("You have: ", gPlayerChips)
    
    doEnterNumToContinue()
end

;--------------------------------------------------------------------------------------------------
; Ask the player to add money to the player's count
;--------------------------------------------------------------------------------------------------
func menu_getMoney()
    ; Ask for money amount
    menu_drawTitleBar("BUY GAME CHIPS")
    
    println("Please input an amount to be exchanged for chips.")
    println("One Euro corresponds to one game chip.")
    println("Enter '0' or less to abort.")

    printPrefixTxtAndAmtLn("Minium play amount is: EUR ", GAME_MIN_BET)
    printPrefixTxtAndAmtLn("Current amount of chips: ", gPlayerChips)

    print("Enter amount to exchange (EUR): ")

    ; Read the amount to exchange and add to player balance,
    ; if <= 0 then it means the player cancelled
    var exchangeAmount = readnum()
    return if exchangeAmount <= 0

    ; Add to the player's balance of chips and the total amount of money input
    gPlayerChips += exchangeAmount
    gGameStatMoneyInput += exchangeAmount

    ; Display the new total to the user
    printPrefixTxtAndAmtLn("New amount of chips: ", gPlayerChips)
    doEnterNumToContinue()
end

;--------------------------------------------------------------------------------------------------
; Asks the player to play another game after playing one
;--------------------------------------------------------------------------------------------------
func menu_askAnotherGame() -> bool
    ; Prompt the user
    menu_drawTitleBar("Play another game?")
    printPrefixTxtAndAmtLn("Chips left: ", gPlayerChips)
    print("Play another game? Enter >= 1 for 'yes' or <= 0 for 'no': ")
     
    ; Return whether the user answered yes or no
    return readnum() >= 1
end

;--------------------------------------------------------------------------------------------------
; Ask the player for the bet amount to start the game.
; If the correct amount is entered then the game starts.
;--------------------------------------------------------------------------------------------------
func menu_getBet()
    ; Continue looping one of several conditions occurs:
    ;   1 - The player decides to quit (enters 0 or less)
    ;   2 - The player no longer has enough cash for minimum bet amount
    ;   3 - The player does not want another game           
    loop
        ; Ask for the bet amount
        menu_drawTitleBar("ENTER BET AMOUNT")
        
        println("Please enter bet amount for this game.")
        println("Enter 0 or less to return back to the main menu.")
        nextln()

        printPrefixTxtAndAmtLn("Minimum bet: ", GAME_MIN_BET)
        printPrefixTxtAndAmtLn("Chips available: ", gPlayerChips)
         
        ; Get the bet amount
        var betAmount = readnum()

        ; If bet amount is <= then the user wants to quit
        break if betAmount <= 0

        ; If the user doesn't enter enough for the minimum bet then 
        ; display a warning and loop around to ask again
        if betAmount < GAME_MIN_BET
            menu_displayBetTooSmallWarning(betAmount)
        end

        ; Begin the game loop with the bet amount
        ; TODO
        ; GameInitGame(betAmount);

        ; Quit out unless the user wants to play again
        break unless menu_askAnotherGame()
    end
end

;--------------------------------------------------------------------------------------------------
; Displays the main menu and reads menu choices.
;--------------------------------------------------------------------------------------------------
func menu_displayMain()
    while gDisplayMenu
        ; Display the menu
        menu_drawTitleBar("BLACKJACK - MAIN MENU")

        print("Chips available to play: ")
        print(gPlayerChips)
        print("\n\n")

        print("1 - New game (normal)\n"
              "2 - New game (advanced)\n"
              "3 - Exchange money for chips\n"
              "4 - Statistics\n"
              "5 - quit\n"
              "\n"
              "Input choice and press enter: ")

        ; Ask the player for input
        var choice = readnum()

        if choice == 1 or choice == 2
            ; User wants to play a game. Make sure we have the minimum bet amount first:
            if gPlayerChips < GAME_MIN_BET
                menu_displayNotEnoughMoneyWarning()
            else
                ; Have enough to play, set the game mode:
                if choice == 1
                    gGameCurrentGameType = GAME_TYPE_NORMAL
                else
                    gGameCurrentGameType = GAME_TYPE_ADVANCED
                end

                ; Ask the player for the bet and start the game
                menu_getBet()
            end
        or if choice == 2
            println("NOT IMPLEMENTED YET!!")
        or if choice == 3
            menu_getMoney()
        or if choice == 4
            menu_displayStatistics()
        or if choice == 5
            gDisplayMenu = false
        else
            println("Invalid menu choice, try again!")
        end
    end
end

;==================================================================================================
; Main program entry point
;==================================================================================================
func main() -> int
    ; Seed the random number generator to the current time (in seconds) and begin the menu loop
    srand(time())
    menu_displayMain()

    ; Program executed successfully, return 0 to indicate that
    return 0
end
