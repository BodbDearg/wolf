
; Note: newline above and below deliberate to test parser

func testAddExpr()
    let v1 = 1 +
        2
    let v2 = 1 -
        2
    let v3 = 1 |
        2
    let v4 = 1 ^
        2
end

func testArrayLit()

    [
    
        1

        ,

    2

        , 

            3

    ]

end

func testAssertStmnt()
    assert
    (
        true
    )
end

func testAssignExpr()
    let v = 0
    v =
        0
    v +=
        0
    v -=
        0
    v |=
        0
    v ^=
        0
    v *=
        0
    v /=
        1
    v %=
        1
    v &=
        0
    v <<=
        0
    v >>=
        0
    v >>>=
        0
end

func testBreakStmnt()
    loop
        break if
            true
    end

    loop
        break unless
            false
    end
end

func testCastExpr()
    let v =
        cast
        (
            1
            to
            int
        )
end

func testCmpExpr()
    let v1 = 1 ==
        1
    let v2 = 1 is
        1
    let v3 = 1 !=
        1
    let v4 = 1 is not
        1
    let v5 = 1 <
        1
    let v6 = 1 <=
        1
    let v7 = 1 >
        1
    let v8 = 1 >=
        1
end

func 

testFunc

(
    
    v 

    :

    int

)
    assert

    (
        true

    )

end


func testFuncArg(
    
    v 
    
        :
    
    int
)
    assert
    (
        true
    )
end

func testFuncCall()

    testFuncCallTestFunc(

        1 

            ,

        2


                , 

3

    )
end

func testFuncCallTestFunc(v1: int, v2: int, v3: int)
end 

func testIfStmnt()
    ; Basic if
    if 
    true
    then

    end

    ; If with else
    unless
    false
    then

        assert(true)

    else

        assert(true)

    end

    ; If with or if
    if 
    
    true

    then

    else if 

    true 

    then

    end
end

func testLAndExpr()
    let v = true and
        true
end

func testLoopStmnt()

    loop

        break

    end

    loop

    repeat

    until

    true

end

func testLOrExpr()
    let v = false or
        true    
end

func testMulExpr()
    let v1 = 1 *
        2
    let v2 = 1 /
        2
    let v3 = 1 %
        2
    let v4 = 1 &
        1
end

func testNextStmnt()
    let keepLooping = true

    while keepLooping
        keepLooping = false
        next

    end

    keepLooping = true

    while keepLooping
        keepLooping = false
        next if
            true
    end
end

func testNotExpr()
    let v1 = not
        true
    let v2 = ~
        1
end

func testPostfixExpr()
    [1,2,3][
        1
    ]

    testFuncCallTestFunc(
        1
        ,
        2
        ,
        3
    )
end

func testPrefixExpr() 
    let v1 = -
        1
    let v2 = +
        1

    let v3 = (
        1
    )
end

func testPrintStmnt()
    print
    (
        1
    )
end

func testRandExpr()
    rand
    (
    )

    srand
    (
        1
    )
end

func testReturnStmnt()
    testReturnStmntFunc1()
    assert(testReturnStmntFunc2())
    testReturnStmntFunc3()
    assert(testReturnStmntFunc4())
end

func testReturnStmntFunc1()

    return

end

func testReturnStmntFunc2() -> bool
    return true
end

func testReturnStmntFunc3()
    return if
        true
end

func testReturnStmntFunc4() -> bool
    return true unless
        false

    return true
end

func testScopeStmnt()

    scope

        assert(true)

    end

end

func testShiftExpr()
    let v1 = 1 <<
        2
    let v2 = 1 >>
        2
    let v3 = 1 >>> 
        2
end

func testTernaryExpr()
    let v = 1 > 2 ?
        true
        :
        false
end

func testTimeExpr()
    let t = 
        time
        (
        )
end

func testType()
    testTypeTestFuncCall()
end

func testTypeTestFuncCall() ->

    [

    3
]

    int

    return [
        1
        , 
        3
        , 
        3
    ]

end

func testVarDecl()
    let
    blah
    :
    int
    = 
    3
end

func testWhileStmnt()

    while
    
    false
    
    do

    end

    while
    false
    end
end

;==================================================================================================
; Run all the tests in this module
;==================================================================================================
func main() -> int
    testAddExpr()
    testArrayLit()
    testAssertStmnt()
    testAssignExpr()
    testBreakStmnt()
    testCastExpr()
    testCmpExpr()
    testFunc(1)
    testFuncArg(1)
    testFuncCall()
    testIfStmnt()
    testLAndExpr()
    testLoopStmnt()
    testLOrExpr()
    testMulExpr()
    testNextStmnt()
    testNotExpr()
    testPostfixExpr()
    testPrefixExpr()
    testPrintStmnt()
    testRandExpr()
    testReturnStmnt()
    testScopeStmnt()
    testShiftExpr()
    testTernaryExpr()
    testTimeExpr()
    testType()
    testVarDecl()
    testWhileStmnt()
    return 0
end

; Note: newline above and below deliberate to test parser

