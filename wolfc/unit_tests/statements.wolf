;==================================================================================================
; The Wolf Programming Language.
;       Copyright (c) 2016, Darragh Coy.
;       See LICENSE.txt for license details.
;==================================================================================================

;==================================================================================================
; NoOpStmnt
;==================================================================================================
func testNoOpStatement()
    noop
    assert(true)    ; Just a simple parse test really
end

;==================================================================================================
; AssertStmnt
;==================================================================================================
func testAssertStmnt()
    assert(true)    ; Just a simple parse test really
end

;==================================================================================================
; VarDecl
;==================================================================================================
func testVarDecl()
    let i = 1234
    let j = 5678
    let k : int = 1234
    let l : int = 5678

    assert(i == 1234)
    assert(j == 5678)
    assert(k == 1234)
    assert(l == 5678)

    let a = false
    let b = true
    let c : bool = false
    let d : bool = true

    assert(not a)
    assert(b)
    assert(not c)
    assert(d)
end

;==================================================================================================
; IfStmnt
;==================================================================================================
func testIfStmnt()
    ; basic 'if' (no else)
    let a = 200
    let b = 300

    if a < b
        a = b
    end

    assert(a == b)

    ; 'if' with 'else if'
    if a < b
        assert(false)   ; Should not be reached
    else if a == b
        a = 400
    end

    assert(a == 400)

    ; 'if' with 'else'
    if a < b
        assert(false)   ; Should not be reached
    else
        a = 200
    end

    assert(a == 200)

    ; 'if' with 'then' (allows single line statement)
    if a < b then a = b end
    assert(a == b)

    ; 'if' with 'else if' and 'then' (allows single line statement)
    if a < b then assert(false) else if a == b then a = 400 end
    assert(a == 400)

    ; 'if' with 'else' and 'then' (allows single line statement)
    if a < b then assert(false) else a = 200 end
    assert(a == 200)

    ; basic 'unless' (no else)
    a = 200

    unless a >= b
        a = b
    end

    assert(a == b)

    ; 'unless' with 'else unless'
    unless a >= b
        assert(false)   ; Should not be reached
    else unless a != b
        a = 400
    end

    assert(a == 400)

    ; 'unless' with 'else'
    unless a >= b
        assert(false)   ; Should not be reached
    else
        a = 200
    end

    assert(a == 200)

    ; 'unless' with 'then' (allows single line statement)
    unless a >= b then a = b end
    assert(a == b)

    ; 'unless' with 'else unless' and 'then' (allows single line statement)
    unless a >= b then assert(false) else unless a != b then a = 400 end
    assert(a == 400)

    ; 'unless' with 'else' and 'then' (allows single line statement)
    unless a >= b then assert(false) else a = 200 end
    assert(a == 200)

    ; if and else with 'do'
    if a is not 200 then assert(false) else do unless a is 200 then assert(false) end end

    ; Same form as the above, put putting 'do' and 'then' on newlines to test newline handling
    if a is not 200
    then
        assert(false)
    else
    do
        unless a is 200
        then
            assert(false)
        end
    end
end

;==================================================================================================
; WhileStmnt
;==================================================================================================
func testWhileStmnt()
    ; Basic while
    let i = 0

    while i < 3
        i++
        let i = 0
        i--
    end

    assert(i == 3)

    ; While with do (allows single line statement)
    i = 0
    while i < 3 do i++ end
    assert(i == 3)

    ; Basic until
    i = 0

    until i >= 3
        i++
        let i = 0
        i--
    end

    assert(i == 3)

    ; Until with do (allows single line statement)
    i = 3
    until i >= 3 do i++ end
    assert(i == 3)

    ; Next statement within a while statement
    i = 1

    while i > 0
        i--
        next
        assert(false)
    end

    ; Break statement within a while statement
    while true
        break
        assert(false)
    end
end

;==================================================================================================
; LoopStmnt
;==================================================================================================
func testLoopStmnt()
    ; loop
    let i = 0

    loop
        i++
        break if i == 3
    end

    assert(i == 3)

    ; loop repeat while
    i = 0

    loop
        i++
    repeat while i < 3

    assert(i == 3)

    ; loop repeat until
    i = 0

    loop
        i++
    repeat until i >= 3

    assert(i == 3)

    ; Next statement within a loop statement
    i = 0

    loop
        break if i > 0
        i++
        next
        assert(false)
    end

    ; Break statement within a loop statement
    loop
        break
        assert(false)
    end

    ; Next statement within a loop repeat statement
    i = 0

    loop
        i++
        next
        assert(false)
    repeat until i > 1

    ; Break statement within a loop repeat statement
    i = 0

    loop
        i--
        break
        assert(false)
    repeat until i < 0    
end

;==================================================================================================
; ScopeStmnt
;==================================================================================================
func testScopeStmnt()
    ; Test scope block
    let i = 1

    scope
        let i = 2
        assert(i == 2)
        i++
        assert(i == 3)
    end

    assert(i == 1)
    i++
    assert(i == 2)

    ; Empty scope test
    scope end
    assert(true)    
end

;==================================================================================================
; BreakStmnt
;==================================================================================================
func testBreakStatement()
    ; break
    loop
        break
        assert(false)   ; Should not be reached
    end

    ; break if
    let breakCond = true

    loop
        break if breakCond
        assert(false)   ; Should not be reached
    end

    ; break unless
    breakCond = false

    loop
        break unless breakCond
        assert(false)   ; Should not be reached
    end
end

;==================================================================================================
; NextStmnt
;==================================================================================================
func testNextStatement()
    ; next
    let continue = false

    while continue 
        continue = false
        next
        assert(false)   ; Should not be reached
    end

    ; next if
    continue = true

    while continue 
        continue = false
        next if not continue
        assert(false)   ; Should not be reached
    end

    ; next unless
    continue = true

    while continue 
        continue = false
        next unless continue
        assert(false)   ; Should not be reached
    end

    ; We had a bug with these
    continue = true

    loop
        break if not continue
        continue = false
        next
        assert(false)
    end

    continue = true

    loop
        continue = false
        next
        assert(false)
    repeat while continue
end

;==================================================================================================
; ReturnStmnt
;==================================================================================================
func testReturnStmntFunc1()
    return
    assert(false)   ; Should be unreachable!
end

func testReturnStmntFunc2()
    loop
        scope
            return
        end
    end

    assert(false)   ; Should be unreachable!
end

func testReturnStmntFunc3() -> int
    return 1234
    assert(false)   ; Should be unreachable!
end

func testReturnStmntFunc4(i: int)
    return if i == 1234
    assert(false)
end

func testReturnStmntFunc5(i: int)
    return unless i == 0
    assert(false)
end

func testReturnStmntFunc6(i: int) -> int
    return 1 if i == 1
    return 2 if i >= 2
    return 0
end

func testReturnStmntFunc7(i: int) -> int
    return 1 unless i <= 0
    return 0
end

func testReturnStmnt()
    testReturnStmntFunc1()
    testReturnStmntFunc2()
    assert(testReturnStmntFunc3() == 1234)
    testReturnStmntFunc4(1234)
    testReturnStmntFunc5(1)
    testReturnStmntFunc5(-1)
    assert(testReturnStmntFunc6(1) == 1)
    assert(testReturnStmntFunc6(2) == 2)
    assert(testReturnStmntFunc6(3) == 2)
    assert(testReturnStmntFunc6(0) == 0)
    assert(testReturnStmntFunc6(-1) == 0)
    assert(testReturnStmntFunc7(-2) == 0)
    assert(testReturnStmntFunc7(0) == 0)
    assert(testReturnStmntFunc7(1) == 1)
    assert(testReturnStmntFunc7(2) == 1)
end

;==================================================================================================
; Comma handling tests
;==================================================================================================

; Make sure the module handles commas between DeclDefs okay
,, func testCommaHandling_DeclDef() do end, func testCommaHandling_DeclDef1() do end,

; Make sure commas are allowed between statements in scopes
func testCommaHandling_Statement() -> int
    let v = 0, v += 1
    v -= 2, return v
end

;==================================================================================================
; Run all the tests in this module
;==================================================================================================
func main() -> int
    ; Tests for specific AST nodes
    testNoOpStatement()
    testAssertStmnt()
    testVarDecl()
    testIfStmnt()
    testWhileStmnt()
    testLoopStmnt()
    testScopeStmnt()
    testBreakStatement()
    testNextStatement()
    testReturnStmnt()

    ; Test the handling of ',' as a statement/decldef separator
    testCommaHandling_DeclDef()
    testCommaHandling_Statement()
    return 0
end
