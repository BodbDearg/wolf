;==================================================================================================
; WhileStmnt
;==================================================================================================
func testWhileStmnt()
    ; Basic while
    var i = 0

    while i < 3
        i++
        var i = 0
        i--
    end

    assert(i == 3)

    ; While with do (allowed on singleline)
    i = 0
    while i < 3 do i++ end
    assert(i == 3)

    ; Basic until
    i = 0

    until i >= 3
        i++
        var i = 0
        i--
    end

    assert(i == 3)

    ; Until with do (allowed on singleline)
    i = 3
    until i >= 3 do i++ end
    assert(i == 3)
end

;==================================================================================================
; LoopStmnt
;==================================================================================================
func testLoopStmnt()
    ; loop
    var i = 0

    loop
        i++
        break if i == 3
    end

    assert(i == 3)

    ; loop repeat while
    i = 0

    loop
        i++
    repeat while i < 3

    assert(i == 3)

    ; loop repeat until
    i = 0

    loop
        i++
    repeat until i >= 3

    assert(i == 3)
end

;==================================================================================================
; ScopeStmnt
;==================================================================================================
func testScopeStmnt()
    var i = 1

    scope
        var i = 2
        assert(i == 2)
        i++
        assert(i == 3)
    end

    assert(i == 1)
    i++
    assert(i == 2)
end

;==================================================================================================
; BreakStmnt
;==================================================================================================
func testBreakStatement()
    ; break
    loop
        break
        assert(false)   ; Should not be reached
    end

    ; break if
    var breakCond = true

    loop
        break if breakCond
        assert(false)   ; Should not be reached
    end

    ; break unless
    breakCond = false

    loop
        break unless breakCond
        assert(false)   ; Should not be reached
    end
end

;==================================================================================================
; NextStmnt
;==================================================================================================
func testNextStatement()
    ; next
    var continue = false

    while continue 
        continue = false
        next
        assert(false)   ; Should not be reached
    end

    ; next if
    continue = true

    while continue 
        continue = false
        next if not continue
        assert(false)   ; Should not be reached
    end

    ; next unless
    continue = true

    while continue 
        continue = false
        next unless continue
        assert(false)   ; Should not be reached
    end
end

;==================================================================================================
; ReturnStmnt
;==================================================================================================
func testReturnStmntFunc1()
    return
    assert(false)   ; Should be unreachable!
end

func testReturnStmntFunc2()
    loop
        scope
            return
        end
    end

    assert(false)   ; Should be unreachable!
end

func testReturnStmntFunc3() -> int
    return 1234
    assert(false)   ; Should be unreachable!
end

func testReturnStmntFunc4(i: int)
    return if i == 1234
    assert(false)
end

func testReturnStmntFunc5(i: int)
    return unless i == 0
    assert(false)
end

func testReturnStmntFunc6(i: int) -> int
    return 1 if i == 1
    return 2 if i >= 2
    return 0
end

func testReturnStmntFunc7(i: int) -> int
    return 1 unless i <= 0
    return 0
end

func testReturnStmnt()
    testReturnStmntFunc1()
    testReturnStmntFunc2()
    assert(testReturnStmntFunc3() == 1234)
    testReturnStmntFunc4(1234)
    testReturnStmntFunc5(1)
    testReturnStmntFunc5(-1)
    assert(testReturnStmntFunc6(1) == 1)
    assert(testReturnStmntFunc6(2) == 2)
    assert(testReturnStmntFunc6(3) == 2)
    assert(testReturnStmntFunc6(0) == 0)
    assert(testReturnStmntFunc6(-1) == 0)
    assert(testReturnStmntFunc7(-2) == 0)
    assert(testReturnStmntFunc7(0) == 0)
    assert(testReturnStmntFunc7(1) == 1)
    assert(testReturnStmntFunc7(2) == 1)
end

;==================================================================================================
; Run the tests
;==================================================================================================
func main() -> int
    testWhileStmnt()
    testLoopStmnt()
    testScopeStmnt()
    testBreakStatement()
    testNextStatement()
    testReturnStmnt()
    return 0
end
