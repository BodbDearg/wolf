;==================================================================================================
; The Wolf Programming Language.
;       Copyright (c) 2016, Darragh Coy.
;       See LICENSE.txt for license details.
;==================================================================================================

;==================================================================================================
; Test: cast from int128
;==================================================================================================
func testCastFromInt128()
    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < -i128 ;/  let val_i128: int128 = ~0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_i128
    /; i128 < +i128 ;/  let val_i128_pos: int128 = 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_i128
    /; i64  < -i128 ;/  let val_i64: int64 = -9_223_372_036_854_775_808_i128
    /; i64  < +i128 ;/  let val_i64_pos: int64 = 9_223_372_036_854_775_807_i128
    /; i32  < -i128 ;/  let val_i32: int32 = -2_147_483_648_i128
    /; i32  < +i128 ;/  let val_i32_pos: int32 = 2_147_483_647_i128
    /; i16  < -i128 ;/  let val_i16: int16 = -32_768_i128
    /; i16  < +i128 ;/  let val_i16_pos: int16 = 32_767_i128
    /; i8   < -i128 ;/  let val_i8: int8 = -128_i128
    /; i8   < +i128 ;/  let val_i8_pos: int8 = 127_i128
    /; u128 < -i128 ;/  ; Data loss! Not allowed.
    /; u128 < +i128 ;/  let val_u128: uint128 = 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_i128
    /; u64  < -i128 ;/  ; Data loss! Not allowed.
    /; u64  < +i128 ;/  let val_u64: uint64 = 18_446_744_073_709_551_615_i128
    /; u32  < -i128 ;/  ; Data loss! Not allowed.
    /; u32  < +i128 ;/  let val_u32: uint32 = 4_294_967_295_i128
    /; u16  < -i128 ;/  ; Data loss! Not allowed.
    /; u16  < +i128 ;/  let val_u16: uint16 = 65535_i128
    /; u8   < -i128 ;/  ; Data loss! Not allowed.
    /; u8   < +i128 ;/  let val_u8: uint8 = 255_i128

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < i128 ;/   let val_i128: int128 = cast(rand() to int128)
        /; i64  < i128 ;/   ; Potential Data loss! Not allowed.
        /; i32  < i128 ;/   ; Potential Data loss! Not allowed.
        /; i16  < i128 ;/   ; Potential Data loss! Not allowed.
        /; i8   < i128 ;/   ; Potential Data loss! Not allowed.
        /; u128 < i128 ;/   ; Potential Data loss! Not allowed.
        /; u64  < i128 ;/   ; Potential Data loss! Not allowed.
        /; u32  < i128 ;/   ; Potential Data loss! Not allowed.
        /; u16  < i128 ;/   ; Potential Data loss! Not allowed.
        /; u8   < i128 ;/   ; Potential Data loss! Not allowed.
    end
end

;==================================================================================================
; Test: cast from int64
;==================================================================================================
func testCastFromInt64()
    ;----------------------------------------------------------------------------------------------
    ; Note: Doing a really really extensive test for the case of int64, which should be our most 
    ; common data type! For the other types we'll just to boundary case tests rather than such 
    ; exhaustive sweeps of all possible conversions. The same logic should be reused for other 
    ; integer types.
    ;----------------------------------------------------------------------------------------------

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < -i64 ;/   let val_i128: int128 = -1_i64
    /; i128 < +i64 ;/   let val_i128_pos: int128 = 0x7FFF_FFFF_FFFF_FFFF_i64
    /; i64  < -i64 ;/   let val_i64: int64 = -1_i64
    /; i64  < +i64 ;/   let val_i64_pos: int64 = 0x7FFF_FFFF_FFFF_FFFF_i64
    /; i32  < -i64 ;/   let val_i32: int32 = -1_i64
    /; i32  < +i64 ;/   let val_i32_pos: int32 = 0x7FFF_FFFF_i64
    /; i16  < -i64 ;/   let val_i16: int16 = -1_i64
    /; i16  < +i64 ;/   let val_i16_pos: int16 = 0x7FFF_i64
    /; i8   < -i64 ;/   let val_i8: int8 = -1_i64
    /; i8   < +i64 ;/   let val_i8_pos: int8 = 0x7F_i64
    /; u128 < -i64 ;/   ; Data loss! Not allowed.
    /; u128 < +i64 ;/   let val_u128: uint128 = 0x7FFF_FFFF_FFFF_FFFF_i64
    /; u64  < -i64 ;/   ; Data loss! Not allowed.
    /; u64  < +i64 ;/   let val_u64: uint64 = 0x7FFF_FFFF_FFFF_FFFF_i64
    /; u32  < -i64 ;/   ; Data loss! Not allowed.
    /; u32  < +i64 ;/   let val_u32: uint32 = 0x7FFF_FFFF_i64
    /; u16  < -i64 ;/   ; Data loss! Not allowed.
    /; u16  < +i64 ;/   let val_u16: uint16 = 0x7FFF_i64
    /; u8   < -i64 ;/   ; Data loss! Not allowed.
    /; u8   < +i64 ;/   let val_u8: uint8 = 0x7F_i64

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < i64 ;/    let val_i128: int128 = cast(rand() to int64)
        /; i64  < i64 ;/    let val_i64: int128 = cast(rand() to int64)
        /; i32  < i64 ;/    ; Potential Data loss! Not allowed.
        /; i16  < i64 ;/    ; Potential Data loss! Not allowed.
        /; i8   < i64 ;/    ; Potential Data loss! Not allowed.
        /; u128 < i64 ;/    ; Potential Data loss! Not allowed.
        /; u64  < i64 ;/    ; Potential Data loss! Not allowed.
        /; u32  < i64 ;/    ; Potential Data loss! Not allowed.
        /; u16  < i64 ;/    ; Potential Data loss! Not allowed.
        /; u8   < i64 ;/    ; Potential Data loss! Not allowed.
    end

    ;----------------------------------------------------------------------------------------------
    ; 2 way conversions where no values are known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        let z: int64 = 0, let p = &z

        /; i128 <> i64: > i128  ;/  assert(val_i128 != $p), assert($p != val_i128)
        /; i64  <> i64: no-op   ;/  assert(val_i64 != $p), assert($p != val_i64)
        /; i32  <> i64: > i64   ;/  assert(val_i32 != $p), assert($p != val_i32)
        /; i16  <> i64: > i64   ;/  assert(val_i16 != $p), assert($p != val_i16)
        /; i8   <> i64: > i64   ;/  assert(val_i8 != $p), assert($p != val_i8)
        /; u128 <> i64:         ;/  ; Potential Data loss! Not allowed.
        /; u64  <> i64:         ;/  ; Potential Data loss! Not allowed.
        /; u32  <> i64: > i64   ;/  assert(val_u32 != $p), assert($p != val_u32)
        /; u16  <> i64: > i64   ;/  assert(val_u16 != $p), assert($p != val_u16)
        /; u8   <> i64: > i64   ;/  assert(val_u8 != $p), assert($p != val_u8)
    end

    ;----------------------------------------------------------------------------------------------
    ; 2 way conversions where one side is known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 <> -i64: > i128 ;/  assert(val_i128 != -2_i64), assert(-2_i64 != val_i128)
        /; i128 <> +i64: > i128 ;/  assert(val_i128 != 2_i64), assert(2_i64 != val_i128)
        /; i64  <> -i64: no-op  ;/  assert(val_i64 != -2_i64), assert(-2_i64 != val_i64)
        /; i64  <> +i64: no-op  ;/  assert(val_i64 != 2_i64), assert(2_i64 != val_i64)
        /; i32  <> -i64: > i64  ;/  assert(val_i32 != -2_i64), assert(-2_i64 != val_i32)
        /; i32  <> +i64: > i64  ;/  assert(val_i32 != 2_i64), assert(2_i64 != val_i32)
        /; i16  <> -i64: > i64  ;/  assert(val_i16 != -2_i64), assert(-2_i64 != val_i16)
        /; i16  <> +i64: > i64  ;/  assert(val_i16 != 2_i64), assert(2_i64 != val_i16)
        /; i8   <> -i64: > i64  ;/  assert(val_i8 != -2_i64), assert(-2_i64 != val_i8)
        /; i8   <> +i64: > i64  ;/  assert(val_i8 != 2_i64), assert(2_i64 != val_i8)
        /; u128 <> -i64:        ;/  ; Data loss! Not allowed.
        /; u128 <> +i64: > u128 ;/  assert(val_u128 != 2_i64), assert(2_i64 != val_u128)
        /; u64  <> -i64:        ;/  ; Data loss! Not allowed.
        /; u64  <> +i64: > i64  ;/  assert(val_u64 != 2_i64), assert(2_i64 != val_u64)
        /; u32  <> -i64:        ;/  ; Data loss! Not allowed.
        /; u32  <> +i64: > i64  ;/  assert(val_u32 != 2_i64), assert(2_i64 != val_u32)
        /; u16  <> -i64:        ;/  ; Data loss! Not allowed.
        /; u16  <> +i64: > i64  ;/  assert(val_u16 != 2_i64), assert(2_i64 != val_u16)
        /; u8   <> -i64:        ;/  ; Data loss! Not allowed.
        /; u8   <> +i64: > i64  ;/  assert(val_u8 != 2_i64), assert(2_i64 != val_u8)
    end

    ;----------------------------------------------------------------------------------------------
    ; 2 way conversions where both sides are known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; +i128    <> +i64: > i128 ;/ assert(1_i128 == 1_i64), assert(1_i64 == 1_i128)
        /; -i128    <> +i64: > i128 ;/ assert(-1_i128 != 1_i64), assert(1_i64 != -1_i128)
        /; +i128    <> -i64: > i128 ;/ assert(1_i128 != -1_i64), assert(-1_i64 != 1_i128)
        /; -i128    <> -i64: > i128 ;/ assert(-1_i128 == -1_i64), assert(-1_i64 == -1_i128)
        /; +i64     <> +i64: no-op  ;/ assert(1_i64 == 1_i64), assert(1_i64 == 1_i64)
        /; -i64     <> +i64: no-op  ;/ assert(-1_i64 != 1_i64), assert(1_i64 != -1_i64)
        /; +i64     <> -i64: no-op  ;/ assert(1_i64 != -1_i64), assert(-1_i64 != 1_i64)
        /; -i64     <> -i64: no-op  ;/ assert(-1_i64 == -1_i64), assert(-1_i64 == -1_i64)
        /; +i32     <> +i64: > i64  ;/ assert(1_i32 == 1_i64), assert(1_i64 == 1_i32)
        /; -i32     <> +i64: > i64  ;/ assert(-1_i32 != 1_i64), assert(1_i64 != -1_i32)
        /; +i32     <> -i64: > i64  ;/ assert(1_i32 != -1_i64), assert(-1_i64 != 1_i32)
        /; -i32     <> -i64: > i64  ;/ assert(-1_i32 == -1_i64), assert(-1_i64 == -1_i32)
        /; +i16     <> +i64: > i64  ;/ assert(1_i16 == 1_i64), assert(1_i64 == 1_i16)
        /; -i16     <> +i64: > i64  ;/ assert(-1_i16 != 1_i64), assert(1_i64 != -1_i16)
        /; +i16     <> -i64: > i64  ;/ assert(1_i16 != -1_i64), assert(-1_i64 != 1_i16)
        /; -i16     <> -i64: > i64  ;/ assert(-1_i16 == -1_i64), assert(-1_i64 == -1_i16)        
        /; +i8      <> +i64: > i64  ;/ assert(1_i8 == 1_i64), assert(1_i64 == 1_i8)
        /; -i8      <> +i64: > i64  ;/ assert(-1_i8 != 1_i64), assert(1_i64 != -1_i8)
        /; +i8      <> -i64: > i64  ;/ assert(1_i8 != -1_i64), assert(-1_i64 != 1_i8)
        /; -i8      <> -i64: > i64  ;/ assert(-1_i8 == -1_i64), assert(-1_i64 == -1_i8)
        /; +u128    <> +i64: > i64  ;/ assert(1_u128 == 1_i64), assert(1_i64 == 1_u128)
        /; +u128    <> -i64: > i64  ;/ assert(1_u128 != -1_i64), assert(-1_i64 != 1_u128)
        /; +u64     <> +i64: > i64  ;/ assert(1_u64 == 1_i64), assert(1_i64 == 1_u64)
        /; +u64     <> -i64: > i64  ;/ assert(1_u64 != -1_i64), assert(-1_i64 != 1_u64)
        /; +u32     <> +i64: > i64  ;/ assert(1_u32 == 1_i64), assert(1_i64 == 1_u32)
        /; +u32     <> -i64: > i64  ;/ assert(1_u32 != -1_i64), assert(-1_i64 != 1_u32)
        /; +u16     <> +i64: > i64  ;/ assert(1_u16 == 1_i64), assert(1_i64 == 1_u16)
        /; +u16     <> -i64: > i64  ;/ assert(1_u16 != -1_i64), assert(-1_i64 != 1_u16)
        /; +u8      <> +i64: > i64  ;/ assert(1_u8 == 1_i64), assert(1_i64 == 1_u8)
        /; +u8      <> -i64: > i64  ;/ assert(1_u8 != -1_i64), assert(-1_i64 != 1_u8)
    end    
end

;==================================================================================================
; Test: cast from int32
;==================================================================================================
func testCastFromInt32()
    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < -i32 ;/   let val_i128: int128 = -2_147_483_648_i32
    /; i128 < +i32 ;/   let val_i128_pos: int128 = 2_147_483_647_i32
    /; i64  < -i32 ;/   let val_i64: int64 = -2_147_483_648_i32
    /; i64  < +i32 ;/   let val_i64_pos: int64 = 2_147_483_647_i32
    /; i32  < -i32 ;/   let val_i32: int32 = -2_147_483_648_i32
    /; i32  < +i32 ;/   let val_i32_pos: int32 = 2_147_483_647_i32
    /; i16  < -i32 ;/   let val_i16: int16 = -32_768_i32
    /; i16  < +i32 ;/   let val_i16_pos: int16 = 32_767_i32
    /; i8   < -i32 ;/   let val_i8: int8 = -128_i32
    /; i8   < +i32 ;/   let val_i8_pos: int8 = 127_i32
    /; u128 < -i32 ;/   ; Data loss! Not allowed.
    /; u128 < +i32 ;/   let val_u128: uint128 = 2_147_483_647_i32
    /; u64  < -i32 ;/   ; Data loss! Not allowed.
    /; u64  < +i32 ;/   let val_u64: uint64 = 2_147_483_647_i32
    /; u32  < -i32 ;/   ; Data loss! Not allowed.
    /; u32  < +i32 ;/   let val_u32: uint32 = 2_147_483_647_i32
    /; u16  < -i32 ;/   ; Data loss! Not allowed.
    /; u16  < +i32 ;/   let val_u16: uint16 = 65535_i32
    /; u8   < -i32 ;/   ; Data loss! Not allowed.
    /; u8   < +i32 ;/   let val_u8: uint8 = 255_i32

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < i32 ;/    let val_i128: int128 = cast(rand() to int32)
        /; i64  < i32 ;/    let val_i64: int64 = cast(rand() to int32)
        /; i32  < i32 ;/    let val_i32: int32 = cast(rand() to int32)
        /; i16  < i32 ;/    ; Potential Data loss! Not allowed.
        /; i8   < i32 ;/    ; Potential Data loss! Not allowed.
        /; u128 < i32 ;/    ; Potential Data loss! Not allowed.
        /; u64  < i32 ;/    ; Potential Data loss! Not allowed.
        /; u32  < i32 ;/    ; Potential Data loss! Not allowed.
        /; u16  < i32 ;/    ; Potential Data loss! Not allowed.
        /; u8   < i32 ;/    ; Potential Data loss! Not allowed.
    end
end

;==================================================================================================
; Test: cast from int16
;==================================================================================================
func testCastFromInt16()
    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < -i16 ;/   let val_i128: int128 = -32_768_i16
    /; i128 < +i16 ;/   let val_i128_pos: int128 = 32_767_i16
    /; i64  < -i16 ;/   let val_i64: int64 = -32_768_i16
    /; i64  < +i16 ;/   let val_i64_pos: int64 = 32_767_i16
    /; i32  < -i16 ;/   let val_i32: int32 = -32_768_i16
    /; i32  < +i16 ;/   let val_i32_pos: int32 = 32_767_i16
    /; i16  < -i16 ;/   let val_i16: int16 = -32_768_i16
    /; i16  < +i16 ;/   let val_i16_pos: int16 = 32_767_i16
    /; i8   < -i16 ;/   let val_i8: int8 = -128_i16
    /; i8   < +i16 ;/   let val_i8_pos: int8 = 127_i16
    /; u128 < -i16 ;/   ; Data loss! Not allowed.
    /; u128 < +i16 ;/   let val_u128: uint128 = 32_767_i16
    /; u64  < -i16 ;/   ; Data loss! Not allowed.
    /; u64  < +i16 ;/   let val_u64: uint64 = 32_767_i16
    /; u32  < -i16 ;/   ; Data loss! Not allowed.
    /; u32  < +i16 ;/   let val_u32: uint32 = 32_767_i16
    /; u16  < -i16 ;/   ; Data loss! Not allowed.
    /; u16  < +i16 ;/   let val_u16: uint16 = 32_767_i16
    /; u8   < -i16 ;/   ; Data loss! Not allowed.
    /; u8   < +i16 ;/   let val_u8: uint8 = 255_i16

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < i16 ;/    let val_i128: int128 = cast(rand() to int16)
        /; i64  < i16 ;/    let val_i64: int64 = cast(rand() to int16)
        /; i32  < i16 ;/    let val_i32: int32 = cast(rand() to int16)
        /; i16  < i16 ;/    let val_i16: int16 = cast(rand() to int16)
        /; i8   < i16 ;/    ; Potential Data loss! Not allowed.
        /; u128 < i16 ;/    ; Potential Data loss! Not allowed.
        /; u64  < i16 ;/    ; Potential Data loss! Not allowed.
        /; u32  < i16 ;/    ; Potential Data loss! Not allowed.
        /; u16  < i16 ;/    ; Potential Data loss! Not allowed.
        /; u8   < i16 ;/    ; Potential Data loss! Not allowed.
    end
end

;==================================================================================================
; Test: cast from int8
;==================================================================================================
func testCastFromInt8()
    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < -i8 ;/    let val_i128: int128 = -128_i8
    /; i128 < +i8 ;/    let val_i128_pos: int128 = 127_i8
    /; i64  < -i8 ;/    let val_i64: int64 = -128_i8
    /; i64  < +i8 ;/    let val_i64_pos: int64 = 127_i8
    /; i32  < -i8 ;/    let val_i32: int32 = -128_i8
    /; i32  < +i8 ;/    let val_i32_pos: int32 = 127_i8
    /; i16  < -i8 ;/    let val_i16: int16 = -128_i8
    /; i16  < +i8 ;/    let val_i16_pos: int16 = 127_i8
    /; i8   < -i8 ;/    let val_i8: int8 = -128_i8
    /; i8   < +i8 ;/    let val_i8_pos: int8 = 127_i8
    /; u128 < -i8 ;/    ; Data loss! Not allowed.
    /; u128 < +i8 ;/    let val_u128: uint128 = 127_i8
    /; u64  < -i8 ;/    ; Data loss! Not allowed.
    /; u64  < +i8 ;/    let val_u64: uint64 = 127_i8
    /; u32  < -i8 ;/    ; Data loss! Not allowed.
    /; u32  < +i8 ;/    let val_u32: uint32 = 127_i8
    /; u16  < -i8 ;/    ; Data loss! Not allowed.
    /; u16  < +i8 ;/    let val_u16: uint16 = 127_i8
    /; u8   < -i8 ;/    ; Data loss! Not allowed.
    /; u8   < +i8 ;/    let val_u8: uint8 = 127_i8

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < i8 ;/     let val_i128: int128 = cast(rand() to int16)
        /; i64  < i8 ;/     let val_i64: int64 = cast(rand() to int16)
        /; i32  < i8 ;/     let val_i32: int32 = cast(rand() to int16)
        /; i16  < i8 ;/     let val_i16: int16 = cast(rand() to int16)
        /; i8   < i8 ;/     ; Potential Data loss! Not allowed.
        /; u128 < i8 ;/     ; Potential Data loss! Not allowed.
        /; u64  < i8 ;/     ; Potential Data loss! Not allowed.
        /; u32  < i8 ;/     ; Potential Data loss! Not allowed.
        /; u16  < i8 ;/     ; Potential Data loss! Not allowed.
        /; u8   < i8 ;/     ; Potential Data loss! Not allowed.
    end
end

;==================================================================================================
; Test: cast from Nullptr
;==================================================================================================
let from_nullptr_to_ptr1: ?int = null
let from_nullptr_to_ptr2: ?bool = null
let from_nullptr_to_ptr3: ?any = null
let from_nullptr_to_ptr4: nullptr = null
let from_nullptr_to_ptr5: bool = null

func testCastFromNullptr()
    assert(from_nullptr_to_ptr1 == null)
    assert(from_nullptr_to_ptr2 == null)
    assert(from_nullptr_to_ptr3 == null)
    assert(from_nullptr_to_ptr4 == null)
    assert(from_nullptr_to_ptr5 == false)
end

;==================================================================================================
; Test: cast from Ptr
;==================================================================================================
let testCastFromPtr_ptr1: ?int = null
let testCastFromPtr_ptr2: ?any = testCastFromPtr_ptr1
let testCastFromPtr_ptr3: ^int = cast(1 to ^int)
let testCastFromPtr_ptr4: ^any = testCastFromPtr_ptr3
let testCastFromPtr_ptr5: ?int = testCastFromPtr_ptr3
let testCastFromPtr_ptr6: ?int = cast(testCastFromPtr_ptr4 to ^int)
let testCastFromPtr_ptr7: ^any = cast(1234 to ^any)
let testCastFromPtr_bool1: bool = testCastFromPtr_ptr1
let testCastFromPtr_bool2: bool = testCastFromPtr_ptr6

func testCastFromPtr()
    assert(not testCastFromPtr_bool1)
    assert(testCastFromPtr_bool2)

    let local_testCastFromPtr_ptr1: ?int = null
    let local_testCastFromPtr_ptr2: ?any = local_testCastFromPtr_ptr1
    let local_testCastFromPtr_ptr3: ^int = cast(1 to ^int)
    let local_testCastFromPtr_ptr4: ^any = local_testCastFromPtr_ptr3
    let local_testCastFromPtr_ptr5: ?int = local_testCastFromPtr_ptr3
    let local_testCastFromPtr_ptr6: ^int = cast(testCastFromPtr_ptr4 to ^int)
    let local_testCastFromPtr_ptr7: ?any = cast(1234 to ?any)
    let local_testCastFromPtr_bool1: bool = local_testCastFromPtr_ptr1
    let local_testCastFromPtr_bool2: bool = local_testCastFromPtr_ptr7

    assert(not local_testCastFromPtr_bool1)
    assert(local_testCastFromPtr_bool2)

    let blah = 12345
    let blah_ptr1: ^int = &blah
    assert($blah_ptr1 == 12345)
    let blah_ptr2: ^any = blah_ptr1
    assert($cast(blah_ptr2 to ^int) == 12345)
end

;==================================================================================================
; Test: cast from uint128
;==================================================================================================
func testCastFromUInt128()
    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < u128 ;/  let val_i128: int128 = 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_u128
    /; i64  < u128 ;/  let val_i64: int64 = 0x7FFF_FFFF_FFFF_FFFF_u128
    /; i32  < u128 ;/  let val_i32: int32 = 0x7FFF_FFFF_u128
    /; i16  < u128 ;/  let val_i16: int16 = 0x7FFF_u128
    /; i8   < u128 ;/  let val_i8: int8 = 0x7F_u128
    /; u128 < u128 ;/  let val_u128: uint128 = 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_u128
    /; u64  < u128 ;/  let val_u64: uint64 = 0xFFFF_FFFF_FFFF_FFFF_u128
    /; u32  < u128 ;/  let val_u32: uint32 = 0xFFFF_FFFF_u128
    /; u16  < u128 ;/  let val_u16: uint16 = 0xFFFF_u128
    /; u8   < u128 ;/  let val_u8: uint8 = 0xFF_u128

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < u128 ;/   ; Potential Data loss! Not allowed.   
        /; i64  < u128 ;/   ; Potential Data loss! Not allowed.
        /; i32  < u128 ;/   ; Potential Data loss! Not allowed.
        /; i16  < u128 ;/   ; Potential Data loss! Not allowed.
        /; i8   < u128 ;/   ; Potential Data loss! Not allowed.
        /; u128 < u128 ;/   let val_u128: uint128 = cast(rand() to uint128)
        /; u64  < u128 ;/   ; Potential Data loss! Not allowed.
        /; u32  < u128 ;/   ; Potential Data loss! Not allowed.
        /; u16  < u128 ;/   ; Potential Data loss! Not allowed.
        /; u8   < u128 ;/   ; Potential Data loss! Not allowed.
    end
end

;==================================================================================================
; Test: cast from uint64
;==================================================================================================
func testCastFromUInt64()
    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < u64 ;/    let val_i128: int128 = 0xFFFF_FFFF_FFFF_FFFF_u64
    /; i64  < u64 ;/    let val_i64: int64 = 0x7FFF_FFFF_FFFF_FFFF_u64
    /; i32  < u64 ;/    let val_i32: int32 = 0x7FFF_FFFF_u64
    /; i16  < u64 ;/    let val_i16: int16 = 0x7FFF_u64
    /; i8   < u64 ;/    let val_i8: int8 = 0x7F_u64
    /; u128 < u64 ;/    let val_u128: uint128 = 0xFFFF_FFFF_FFFF_FFFF_u64
    /; u64  < u64 ;/    let val_u64: uint64 = 0xFFFF_FFFF_FFFF_FFFF_u64
    /; u32  < u64 ;/    let val_u32: uint32 = 0xFFFF_FFFF_u64
    /; u16  < u64 ;/    let val_u16: uint16 = 0xFFFF_u64
    /; u8   < u64 ;/    let val_u8: uint8 = 0xFF_u64

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < u64 ;/    let val_i128: int128 = cast(rand() to uint64)
        /; i64  < u64 ;/    ; Potential Data loss! Not allowed.
        /; i32  < u64 ;/    ; Potential Data loss! Not allowed.
        /; i16  < u64 ;/    ; Potential Data loss! Not allowed.
        /; i8   < u64 ;/    ; Potential Data loss! Not allowed.
        /; u128 < u64 ;/    let val_u128: uint128 = cast(rand() to uint64)
        /; u64  < u64 ;/    let val_u64: uint64 = cast(rand() to uint64)
        /; u32  < u64 ;/    ; Potential Data loss! Not allowed.
        /; u16  < u64 ;/    ; Potential Data loss! Not allowed.
        /; u8   < u64 ;/    ; Potential Data loss! Not allowed.
    end
end

;==================================================================================================
; Test: cast from uint32
;==================================================================================================
func testCastFromUInt32()
    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < u32 ;/    let val_i128: int128 = 0xFFFF_FFFF_u32
    /; i64  < u32 ;/    let val_i64: int64 = 0xFFFF_FFFF_u32
    /; i32  < u32 ;/    let val_i32: int32 = 0x7FFF_FFFF_u32
    /; i16  < u32 ;/    let val_i16: int16 = 0x7FFF_u32
    /; i8   < u32 ;/    let val_i8: int8 = 0x7F_u32
    /; u128 < u32 ;/    let val_u128: uint128 = 0xFFFF_FFFF_u32
    /; u64  < u32 ;/    let val_u64: uint64 = 0xFFFF_FFFF_u32
    /; u32  < u32 ;/    let val_u32: uint32 = 0xFFFF_FFFF_u32
    /; u16  < u32 ;/    let val_u16: uint16 = 0xFFFF_u32
    /; u8   < u32 ;/    let val_u8: uint8 = 0xFF_u32

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < u32 ;/    let val_i128: int128 = cast(rand() to uint32)
        /; i64  < u32 ;/    let val_i64: int64 = cast(rand() to uint32)
        /; i32  < u32 ;/    ; Potential Data loss! Not allowed.
        /; i16  < u32 ;/    ; Potential Data loss! Not allowed.
        /; i8   < u32 ;/    ; Potential Data loss! Not allowed.
        /; u128 < u32 ;/    let val_u128: uint128 = cast(rand() to uint32)
        /; u64  < u32 ;/    let val_u64: uint64 = cast(rand() to uint32)
        /; u32  < u32 ;/    let val_u32: uint32 = cast(rand() to uint32)
        /; u16  < u32 ;/    ; Potential Data loss! Not allowed.
        /; u8   < u32 ;/    ; Potential Data loss! Not allowed.
    end
end

;==================================================================================================
; Test: cast from uint16
;==================================================================================================
func testCastFromUInt16()
    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < u16 ;/    let val_i128: int128 = 0xFFFF_u16
    /; i64  < u16 ;/    let val_i64: int64 = 0xFFFF_u16
    /; i32  < u16 ;/    let val_i32: int32 = 0xFFFF_u16
    /; i16  < u16 ;/    let val_i16: int16 = 0x7FFF_u16
    /; i8   < u16 ;/    let val_i8: int8 = 0x7F_u16
    /; u128 < u16 ;/    let val_u128: uint128 = 0xFFFF_u16
    /; u64  < u16 ;/    let val_u64: uint64 = 0xFFFF_u16
    /; u32  < u16 ;/    let val_u32: uint32 = 0xFFFF_u16
    /; u16  < u16 ;/    let val_u16: uint16 = 0xFFFF_u16
    /; u8   < u16 ;/    let val_u8: uint8 = 0xFF_u16

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < u16 ;/    let val_i128: int128 = cast(rand() to uint16)
        /; i64  < u16 ;/    let val_i64: int64 = cast(rand() to uint16)
        /; i32  < u16 ;/    let val_i32: int32 = cast(rand() to uint16)
        /; i16  < u16 ;/    ; Potential Data loss! Not allowed.
        /; i8   < u16 ;/    ; Potential Data loss! Not allowed.
        /; u128 < u16 ;/    let val_u128: uint128 = cast(rand() to uint16)
        /; u64  < u16 ;/    let val_u64: uint64 = cast(rand() to uint16)
        /; u32  < u16 ;/    let val_u32: uint32 = cast(rand() to uint16)
        /; u16  < u16 ;/    let val_u16: uint16 = cast(rand() to uint16)
        /; u8   < u16 ;/    ; Potential Data loss! Not allowed.
    end
end

;==================================================================================================
; Test: cast from uint8
;==================================================================================================
func testCastFromUInt8()
    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is known at compile time:
    ;----------------------------------------------------------------------------------------------

    /; i128 < u8 ;/     let val_i128: int128 = 0xFF_u8
    /; i64  < u8 ;/     let val_i64: int64 = 0xFF_u8
    /; i32  < u8 ;/     let val_i32: int32 = 0xFF_u8
    /; i16  < u8 ;/     let val_i16: int16 = 0xFF_u8
    /; i8   < u8 ;/     let val_i8: int8 = 0x7F_u8
    /; u128 < u8 ;/     let val_u128: uint128 = 0xFF_u8
    /; u64  < u8 ;/     let val_u64: uint64 = 0xFF_u8
    /; u32  < u8 ;/     let val_u32: uint32 = 0xFF_u8
    /; u16  < u8 ;/     let val_u16: uint16 = 0xFF_u8
    /; u8   < u8 ;/     let val_u8: uint8 = 0xFF_u8

    ;----------------------------------------------------------------------------------------------
    ; 1 way conversion where value is not known at compile time:
    ;----------------------------------------------------------------------------------------------
    scope
        /; i128 < u8 ;/     let val_i128: int128 = cast(rand() to uint8)
        /; i64  < u8 ;/     let val_i64: int64 = cast(rand() to uint8)
        /; i32  < u8 ;/     let val_i32: int32 = cast(rand() to uint8)
        /; i16  < u8 ;/     let val_i16: int16 = cast(rand() to uint8)
        /; i8   < u8 ;/     ; Potential Data loss! Not allowed.
        /; u128 < u8 ;/     let val_u128: uint128 = cast(rand() to uint8)
        /; u64  < u8 ;/     let val_u64: uint64 = cast(rand() to uint8)
        /; u32  < u8 ;/     let val_u32: uint32 = cast(rand() to uint8)
        /; u16  < u8 ;/     let val_u16: uint16 = cast(rand() to uint8)
        /; u8   < u8 ;/     let val_u8: uint8 = cast(rand() to uint8)
    end
end


;==================================================================================================
; Test: Implicit casting for 'AddExpr'
;==================================================================================================
let testImplicitCastForAddExpr_1 = 12u16 + 32i32
let testImplicitCastForAddExpr_2 = 12u16 - 32i32
let testImplicitCastForAddExpr_3 = 32i32 | 1i64
let testImplicitCastForAddExpr_4 = 32i32 ^ 1i64

func testImplicitCastForAddExpr()
    assert(testImplicitCastForAddExpr_1 == 44)
    assert(testImplicitCastForAddExpr_2 == -20)
    assert(testImplicitCastForAddExpr_3 == 33)
    assert(testImplicitCastForAddExpr_4 == 33)
    
    let someval1 = 12u16
    let someval2 = 32i32
    let someval3 = 1i64

    let v1 = someval1 + someval2
    let v2 = someval1 - someval2
    let v3 = someval2 | someval3
    let v4 = someval2 ^ someval3

    assert(v1 == 44)
    assert(v2 == -20)
    assert(v3 == 33)
    assert(v4 == 33)
end

;==================================================================================================
; Test: Implicit casting for 'AssertStmnt'
;==================================================================================================
func testImplicitCastForAssertStmnt()
    ; Test: implicit cast to 'bool'
    let someInt = 1234
    assert(cast(&someInt to ?int))
end

;==================================================================================================
; Test: Implicit casting for 'BreakStmnt'
;==================================================================================================
func testImplicitCastForBreakStmnt()
    let blah = 0
    let blahPtr: ?int = &blah

    loop
        $blahPtr = $blahPtr + 1
        blahPtr = null
        break unless blahPtr
    end

    assert(blah == 1)
end

;==================================================================================================
; Test: Implicit casting for 'AssignExpr'
;==================================================================================================
func testImplicitCastForAssignExpr()
    ; Test: = 
    let v1: int64 = 0
    v1 = 123u8
    assert(v1 == 123)

    ; Test: +=
    let v2: int8 = 1
    v2 += 2
    assert(v2 == 3)

    ; Test: -=
    let v3: int64 = 120
    v3 -= 3
    assert(v3 == 117)

    ; Test: |=
    let v4: int8 = 32
    v4 |= 1u128
    assert(v4 == 33)

    ; Test: ^=
    let v5: int8 = 33
    v5 ^= 1
    assert(v5 == 32u16)

    ; Test: *=
    let v6: int16 = 12
    v6 *= 12u8
    assert(v6 == 144)

    ; Test: /=
    let v7: uint = 100
    v7 /= 10i8
    assert(v7 == 10)

    ; Test: %=
    let v8: int = 123
    v8 %= 120u8
    assert(v8 == 3)

    ; Test: &=
    let v9: uint8 = 33
    v9 &= 32
    assert(v9 == 32)
    v9 &= 1
    assert(v9 == 0)

    ; Test: <<=
    let v10: uint16 = 1
    v10 <<= 3u64
    assert(v10 == 8)

    ; Test: >>=
    let v11: uint32 = 16
    v11 >>= 2u8
    assert(v11 == 4)

    ; Test: >>>=
    let v12: uint32 = 16
    v12 >>>= 2u8
    assert(v12 == 4)
end

;==================================================================================================
; Test: Implicit casting for 'CmpExpr'
;==================================================================================================
let testImplicitCastForCmpExpr_1 = 123u8 == 123i16
let testImplicitCastForCmpExpr_2 = 256u32 is 256u64
let testImplicitCastForCmpExpr_3 = 0xFF00_i64 != 0xFF0F_i32
let testImplicitCastForCmpExpr_4 = 0x0F_i8 is not 0xFF_u16
let testImplicitCastForCmpExpr_5 = 123u8 < 1234u64
let testImplicitCastForCmpExpr_6 = 123i32 <= 123u8
let testImplicitCastForCmpExpr_7 = 100u8 > 56u32
let testImplicitCastForCmpExpr_8 = 100i16 >= 100u32

func testImplicitCastForCmpExpr()
    assert(testImplicitCastForCmpExpr_1)
    assert(testImplicitCastForCmpExpr_2)
    assert(testImplicitCastForCmpExpr_3)
    assert(testImplicitCastForCmpExpr_4)
    assert(testImplicitCastForCmpExpr_5)
    assert(testImplicitCastForCmpExpr_6)
    assert(testImplicitCastForCmpExpr_7)
    assert(testImplicitCastForCmpExpr_8)

    let v1 = 123u8 == 123i16
    let v2 = 256u32 is 256u64
    let v3 = 0xFF00_i64 != 0xFF0F_i32
    let v4 = 0x0F_i8 is not 0xFF_u16
    let v5 = 123u8 < 1234u64
    let v6 = 123i32 <= 123u8
    let v7 = 100u8 > 56u32
    let v8 = 100i16 >= 100u32

    assert(v1)
    assert(v2)
    assert(v3)
    assert(v4)
    assert(v5)
    assert(v6)
    assert(v7)
    assert(v8)
end

;==================================================================================================
; Test: Implicit casting for 'IfStmnt'
;==================================================================================================
func testImplicitCastForIfStmnt()
    ; Test that pointers will cast to bool ok
    let nullPtr = null
    let nonNullPtr: ?any = &nullPtr

    ; If without an else
    if nullPtr
        assert(false)
    end

    unless nonNullPtr
        assert(false)
    end

    ; If statement with else
    if nullPtr
        assert(false)
    else
        noop
    end

    unless nonNullPtr
        assert(false)
    else
        noop
    end

    ; If statement with else if
    if nullPtr
        assert(false)
    else if nonNullPtr
        noop
    else
        assert(false)
    end

    unless nonNullPtr
        assert(false)
    else unless nullPtr
        noop
    else
        assert(false)
    end
end

;==================================================================================================
; Test: Implicit casting for 'LoopStmnt'
;==================================================================================================
func testImplicitCastForLoopStmnt()
    let blah = 0
    let blahPtr: ?int = &blah

    loop
        $blahPtr = $blahPtr + 1
        blahPtr = null
    repeat while blahPtr

    assert(blah == 1)
end

;==================================================================================================
; Test: Implicit casting for 'LAndExpr'
;==================================================================================================
let testImplicitCastForLAndExpr_1: ?int = null
let testImplicitCastForLAndExpr_2: ?int = cast(1 to ?int)
let testImplicitCastForLAndExpr_3: bool = testImplicitCastForLAndExpr_1 and testImplicitCastForLAndExpr_2
let testImplicitCastForLAndExpr_4: bool = testImplicitCastForLAndExpr_2 and testImplicitCastForLAndExpr_2

func testImplicitCastForLAndExpr()
    assert(not testImplicitCastForLAndExpr_3)
    assert(testImplicitCastForLAndExpr_4)

    let someVal1: ?int = null
    let someVal2: ?int = cast(1 to ?int)
    let v1 = someVal1 and someVal2
    let v2 = someVal2 and someVal2

    assert(not v1)
    assert(v2)
end

;==================================================================================================
; Test: Implicit casting for 'LOrExpr'
;==================================================================================================
let testImplicitCastForLOrExpr_1: ?int = null
let testImplicitCastForLOrExpr_2: ?int = cast(1 to ?int)
let testImplicitCastForLOrExpr_3: bool = testImplicitCastForLOrExpr_1 or testImplicitCastForLOrExpr_1
let testImplicitCastForLOrExpr_4: bool = testImplicitCastForLOrExpr_1 or testImplicitCastForLOrExpr_2

func testImplicitCastForLOrExpr()
    assert(not testImplicitCastForLOrExpr_3)
    assert(testImplicitCastForLOrExpr_4)

    let someVal1: ?int = null
    let someVal2: ?int = cast(1 to ?int)
    let v1 = someVal1 or someVal1
    let v2 = someVal1 or someVal2

    assert(not v1)
    assert(v2)
end

;==================================================================================================
; Test: Implicit casting for 'MulExpr'
;==================================================================================================
let testImplicitCastForMulExpr_1 = 2i8 * 3i16
let testImplicitCastForMulExpr_2 = 64i32 / 2i8
let testImplicitCastForMulExpr_3 = 3i16 % 2i8
let testImplicitCastForMulExpr_4 = 3i16 & 2i8

func testImplicitCastForMulExpr()
    assert(testImplicitCastForMulExpr_1 == 6)
    assert(testImplicitCastForMulExpr_2 == 32)
    assert(testImplicitCastForMulExpr_3 == 1)
    assert(testImplicitCastForMulExpr_4 == 2)

    let someVal1 = 2i8
    let someVal2 = 3i16
    let someVal3 = 64i32

    let v1 = someVal1 * someVal2, assert(v1 == 6)
    let v2 = someVal3 / someVal1, assert(v2 == 32)
    let v3 = someVal2 % someVal1, assert(v3 == 1)
    let v4 = someVal2 & someVal1, assert(v4 == 2)
end

;==================================================================================================
; Test: Implicit casting for 'NotExpr'
;==================================================================================================

; Test implicit cast to 'bool' for logical not
let testImplicitCastForNotExpr_1: ?int = null
let testImplicitCastForNotExpr_2: ?int = cast(1 to ?int)
let testImplicitCastForNotExpr_3: bool = testImplicitCastForNotExpr_1
let testImplicitCastForNotExpr_4: bool = testImplicitCastForNotExpr_2

func testImplicitCastForNotExpr()
    ; Test implicit cast to 'bool' for logical not
    assert(not testImplicitCastForNotExpr_3)
    assert(testImplicitCastForNotExpr_4)
    let ptr1: ?int = null
    let ptr2: ?int = cast(1 to ?int)
    assert(not ptr1)
    assert(not not ptr2)
end

;==================================================================================================
; Test: Implicit casting for 'ShiftExpr'
;==================================================================================================
let testImplicitCastForShiftExpr_1 = 1u8 << 4u32
let testImplicitCastForShiftExpr_2 = testImplicitCastForShiftExpr_1 >> 2u16
let testImplicitCastForShiftExpr_3 = testImplicitCastForShiftExpr_1 >>> 2u16

func testImplicitCastForShiftExpr()
    assert(testImplicitCastForShiftExpr_1 == 16)
    assert(testImplicitCastForShiftExpr_2 == 4)
    assert(testImplicitCastForShiftExpr_3 == 4)

    let someVal1 = 1u8
    let someVal2 = 2u16
    let someVal3 = 4u32

    let v1 = someVal1 << someVal3, assert(v1 == 16)
    let v2 = v1 >> someVal2, assert(v2 == 4)
    let v3 = v1 >>> someVal2, assert(v3 == 4)
end

;==================================================================================================
; Test: Implicit casting for 'TernaryExpr'
;==================================================================================================
let testImplicitCastForTernaryExpr_1 = null
let testImplicitCastForTernaryExpr_2 = cast(1 to ?int)
let testImplicitCastForTernaryExpr_3 = testImplicitCastForTernaryExpr_1 ? 18u8 : -43i32
let testImplicitCastForTernaryExpr_4 = testImplicitCastForTernaryExpr_2 ? 18i32 : 43u64

func testImplicitCastForTernaryExpr()
    assert(testImplicitCastForTernaryExpr_3 == -43)
    assert(testImplicitCastForTernaryExpr_4 == 18)

    let someVal1 = null
    let someVal2 = cast(1 to ?int)
    let v1 = someVal1 ? 18u8 : -43i32
    let v2 = someVal2 ? 18u8 : -43i32
    assert(v1 == -43)
    assert(v2 == 18)
end

;==================================================================================================
; Test: Implicit casting for 'VarDecl'
;==================================================================================================
let testImplicitCastForVarDecl_1: bool = null
let testImplicitCastForVarDecl_2: uint8 = cast(255 to uint64)
let testImplicitCastForVarDecl_3: ?any = null

func testImplicitCastForVarDecl()
    assert(testImplicitCastForVarDecl_1 == false)
    assert(testImplicitCastForVarDecl_2 == 255)
    assert(testImplicitCastForVarDecl_3 == null)

    let v1: bool = null
    let v2: uint8 = cast(255 to uint64)
    let v3: ?any = null

    assert(v1 == false)
    assert(v2 == 255)
    assert(v3 == null)
end

;==================================================================================================
; Test: Implicit casting for 'WhileStmnt'
;==================================================================================================
func testImplicitCastForWhileStmnt()
    let blah = 0
    let blahPtr: ?int = &blah

    while blahPtr
        $blahPtr = $blahPtr + 1
        blahPtr = null
    end

    assert(blah == 1)
end

;==================================================================================================
; Run all the tests in this module
;==================================================================================================
func main() -> int
    ; Implicit casts from types
    testCastFromInt128()
    testCastFromInt64()
    testCastFromInt32()
    testCastFromInt16()
    testCastFromInt8()
    testCastFromNullptr()
    testCastFromPtr()
    testCastFromUInt128()
    testCastFromUInt64()
    testCastFromUInt32()
    testCastFromUInt16()
    testCastFromUInt8()

    ; Implicit casts in various AST nodes
    testImplicitCastForAddExpr()
    testImplicitCastForAssertStmnt()
    testImplicitCastForAssignExpr()
    testImplicitCastForBreakStmnt()
    testImplicitCastForCmpExpr()
    testImplicitCastForIfStmnt()
    testImplicitCastForLAndExpr()
    testImplicitCastForLoopStmnt()
    testImplicitCastForLOrExpr()
    testImplicitCastForMulExpr()
    testImplicitCastForNotExpr()
    testImplicitCastForShiftExpr()
    testImplicitCastForTernaryExpr()
    testImplicitCastForVarDecl()
    testImplicitCastForWhileStmnt()

    return 0
end
