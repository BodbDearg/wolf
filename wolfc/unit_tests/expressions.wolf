;==================================================================================================
; The Wolf Programming Language.
;       Copyright (c) 2016, Darragh Coy.
;       See LICENSE.txt for license details.
;==================================================================================================

;==================================================================================================
; AssignExpr
;==================================================================================================
func testAssignExpr()
    ; Test: basic '=' assign
    let i = 0
    assert(i == 0)
    i = 1
    assert(i == 1)

    ; Test: '+=' operator
    i += 2
    assert(i == 3)

    ; Test: '-=' operator
    i -= 2
    assert(i == 1)

    ; Test: '|=' operator
    i |= 4
    assert(i == 5)
    i |= 1
    assert(i == 5)
    i |= 2
    assert(i == 7)

    ; Test: '^=' operator
    i ^= 1    
    assert(i == 6)
    i ^= 4
    assert(i == 2)

    ; Test: '*=' operator
    i *= 5
    assert(i == 10)

    ; Test: '/=' operator
    i /= 5
    assert(i == 2)

    ; Test: '%=' operator
    i %= 3
    assert(i == 2)
    i %= 2
    assert(i == 0)

    ; Test: '&=' operator
    i = 7
    i &= 3
    assert(i == 3)
    i &= 3
    assert(i == 3)
    i &= 4
    assert(i == 0)

    ; Test: '<<=' operator
    i = 10
    i <<= 1
    assert(i == 20)

    ; Test: '>>=' operator
    i >>= 2
    assert(i == 5)
    i = -10
    i >>= 1
    assert(i == -5)

    ; Test: '>>>=' operator
    i = -1
    i >>>= 63
    assert(i == 1)  ; FIXME - this won't work if int type is 32-bit    
end

;==================================================================================================
; TernaryExpr
;==================================================================================================
let testTernaryExprConstexpr = [
    ; Test: ternary '? : ' expression
    (true ? 1 : 2) == 1,
    (false ? 1 : 2) == 2
]

func testTernaryExpr()
    ; Test: ternary '? : ' expression
    assert((true ? 1 : 2) == 1)
    assert((false ? 1 : 2) == 2)

    ; Make sure the constant expression tests pass
    let testNum = 0
    while testNum < 2
        assert(testOrExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; OrExpr
;==================================================================================================
let testOrExprConstexpr = [
    ; Test: logical or
    not (false or false),
    true or false,
    true or true,
    false or true
]

func testOrExpr()
    ; Test: logical or
    assert(not (false or false))
    assert(true or false)
    assert(true or true)
    assert(false or true)

    ; Make sure the constant expression tests pass
    let testNum = 0
    while testNum < 4
        assert(testOrExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; AndExpr
;==================================================================================================
let testAndExprConstexpr = [
    ; Test: logical and
    not (false and false),
    not (true and false),
    not (false and true),
    true and true
]

func testAndExpr()
    ; Test: logical and
    assert(not (false and false))
    assert(not (true and false))
    assert(not (false and true))
    assert(true and true)

    ; Make sure the constant expression tests pass
    let testNum = 0
    while testNum < 4
        assert(testAndExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; NotExpr
;==================================================================================================
let testNotExprConstexpr = [
    ; Test: logical not
    not false,
    not 1 > 2,
    not not true,
    not not 1 < 2,

    ; Test: bitwise not
    (~-1) == 0,
    (~-2) == 1
]

func testNotExpr()
    ; Test: logical not
    assert(not false)
    assert(not 1 > 2)
    assert(not not true)
    assert(not not 1 < 2)

    ; Test: bitwise not
    assert((~-1) == 0)
    assert((~-2) == 1)

    ; Make sure the constant expression tests pass
    let testNum = 0
    while testNum < 6 
        assert(testNotExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; CmpExpr
;==================================================================================================
let testCmpExprConstexpr = [
    ; Test: ==
    2 == 2,
    not 1 == 2,
    not 3 == 2,

    ; Test: !=
    not 2 != 2,
    1 != 2,
    3 != 2,

    ; Test: <
    1 < 2,
    not 2 < 2,
    not 3 < 2,

    ; Test: <=
    1 <= 2,
    2 <= 2,
    not 3 <= 2,

    ; Test: >
    2 > 1,
    not 1 > 1,
    not 0 > 1,

    ; Test: >=
    2 >= 1,
    1 >= 1,
    not 0 >= 1,

    ; Test: boolean literals
    true == true,
    false != true,
    not true == false,
    not false != false,

    ; Test: is (alias for '==')
    1234 is 1234,
    not 1234 is 5678,

    ; Test: is not (alias for '!=')
    1234 is not 5678,
    not 1234 is not 1234,

    ; Test: pointer comparison tests
    cast(0 to ^int) < cast(1 to ?int),
    cast(0 to ^int) <= cast(1 to ?int),
    cast(1 to ^int) <= cast(1 to ?int),
    cast(1 to ^int) == cast(1 to ?int),
    cast(1 to ^int) != cast(0 to ?int),
    cast(2 to ^int) >= cast(1 to ^int),
    cast(2 to ^int) >= cast(2 to ^int),
    cast(2 to ^int) > cast(1 to ^int),

    ; Test: nullptr comparisons,
    not null < null,
    null <= null,
    null == null,
    not null != null,
    null >= null,
    not null > null
]

func testCmpExpr()
    ; Test: ==
    assert(2 == 2)
    assert(not 1 == 2)
    assert(not 3 == 2)

    ; Test: !=
    assert(not 2 != 2)
    assert(1 != 2)
    assert(3 != 2)

    ; Test: <
    assert(1 < 2)
    assert(not 2 < 2)
    assert(not 3 < 2)

    ; Test: <=
    assert(1 <= 2)
    assert(2 <= 2)
    assert(not 3 <= 2)

    ; Test: >
    assert(2 > 1)
    assert(not 1 > 1)
    assert(not 0 > 1)

    ; Test: >=
    assert(2 >= 1)
    assert(1 >= 1)
    assert(not 0 >= 1)

    ; Test: boolean literals
    assert(true == true)
    assert(false != true)
    assert(not true == false)
    assert(not false != false)

    ; Test: is (alias for '==')
    assert(1234 is 1234)
    assert(not 1234 is 5678)

    ; Test: is not (alias for '!=')
    assert(1234 is not 5678)
    assert(not 1234 is not 1234)

    ; Pointer comparison tests 
    scope
        ; All permutations of comparisons
        let theArray = [ 10, 20, 30, 40, 50 ]
        let a = &theArray[1]
        let b = &theArray[2]
        let c = &theArray[2]
        let d = &theArray[3]
        assert(a < b and a <= b and not a == b and a != b and not a >= b and not a > b)
        assert(a < c and a <= c and not a == c and a != c and not a >= c and not a > c)
        assert(a < d and a <= d and not a == d and a != d and not a >= d and not a > d)
        assert(not b < a and not b <= a and not b == a and b != a and b >= a and b > a)
        assert(not b < c and b <= c and b == c and not b != c and b >= c and not b > c)
        assert(b < d and b <= d and not b == d and b != d and not b >= d and not b > d)
        assert(not c < a and not c <= a and not c == a and c != a and c >= a and c > a)
        assert(not c < b and c <= b and c == b and not c != b and c >= b and not c > b)
        assert(c < d and c <= d and not c == d and c != d and not c >= d and not c > d)
        assert(not d < a and not d <= a and not d == a and d != a and d >= a and d > a)
        assert(not d < b and not d <= b and not d == b and d != b and d >= b and d > b)
        assert(not d < c and not d <= c and not d == c and d != c and d >= c and d > c)

        ; Make sure even a 1 byte offset matters
        ; Also use this opportunity to sneak in a '^int' vs '?int' comparison
        let e = cast(cast(&theArray[2] to int) + 1 to ?int64)
        let f = cast(cast(&theArray[2] to int) - 1 to ?int64)
        assert(b < e)
        assert(b > f)

        ; Nullptr comparisons
        assert(not null < null)
        assert(null <= null)
        assert(null == null)
        assert(not null != null)
        assert(null >= null)
        assert(not null > null)
    end

    ; Make sure the constant expression tests pass
    let testNum = 0
    while testNum < 40
        assert(testCmpExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; AddExpr
;==================================================================================================
let testAddExprConstexpr = [
    ; Test: add
    1 + 2 == 3,
    1 + +2 == 3,
    +1 + +2 == 3,
    1 + -2 == -1,
    -1 + -2 == -3,

    ; Test: subtract
    2 - 5 == -3,
    2 - -5 == 7,
    -2 - -5 == 3,

    ; Test: bitwise or
    1 | 2 == 3,
    1 | 1 == 1,
    0 | 1 == 1,

    ; Test: bitwise xor
    1 ^ 2 == 3,
    1 ^ 1 == 0,
    0 ^ 1 == 1,

    ; Test: pointer add
    cast(cast(32 to ^int64) + 2 to int) == 48,
    cast(cast(32 to ^int8) + 2 to int) == 34,

    ; Test: pointer sub
    cast(cast(32 to ^int64) - 2 to int) == 16,
    cast(cast(32 to ^int8) - 2 to int) == 30,

    ; Test: pointer difference
    cast(32 to ^int32) - cast(20 to ^int32) == 3,
    cast(32 to ^int32) - cast(40 to ^int32) == -2,
    cast(32 to ^int8) - cast(20 to ^int8) == 12,
    cast(32 to ^int8) - cast(40 to ^int8) == -8
]

func testAddExpr()
    ; Test: add
    assert(1 + 2 == 3)
    assert(1 + +2 == 3)
    assert(+1 + +2 == 3)
    assert(1 + -2 == -1)
    assert(-1 + -2 == -3)

    ; Test: subtract
    assert(2 - 5 == -3)
    assert(2 - -5 == 7)
    assert(-2 - -5 == 3)

    ; Test: bitwise or
    assert(1 | 2 == 3)
    assert(1 | 1 == 1)
    assert(0 | 1 == 1)

    ; Test: bitwise xor
    assert(1 ^ 2 == 3)
    assert(1 ^ 1 == 0)
    assert(0 ^ 1 == 1)

    ; Test: pointer add and subtract
    let theArray = [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ]
    let ptr = &theArray[5]

    assert($ptr == 50)
    assert($(ptr + 1) == 60)
    assert($(ptr + 2) == 70)
    assert($(ptr - 2) == 30)
    assert($(ptr - 1) == 40)

    ; Test: pointer difference
    let ptr2 = &theArray[7]
    let ptr1 = cast(&theArray[3] to ?int)
    assert(ptr - ptr2 == -2)
    assert(ptr - ptr1 == 2)

    ; Make sure the constant expression tests pass
    let testNum = 0
    while testNum < 22
        assert(testAddExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; MulExpr
;==================================================================================================
let testMulExprConstexpr = [
    ; Test: multiply
    2 * 2 == 4,
    2 * -2 == -4,
    -2 * -2 == 4,

    ; Test: divide
    10 / 2 == 5,
    10 / -2 == -5,

    ; Test: remainder
    5 % 3 == 2,
    5 % 3 == 2,

    ; Test: bitwise and
    1 & 1 == 1,
    2 & 1 == 0,
    3 & 1 == 1,
    6 & 2 == 2
]

func testMulExpr()
    ; Test: multiply
    assert(2 * 2 == 4)
    assert(2 * -2 == -4)
    assert(-2 * -2 == 4)

    ; Test: divide
    assert(10 / 2 == 5)
    assert(10 / -2 == -5)

    ; Test: remainder
    assert(5 % 3 == 2)
    assert(5 % -3 == 2)

    ; Test: bitwise and
    assert(1 & 1 == 1)
    assert(2 & 1 == 0)
    assert(3 & 1 == 1)
    assert(6 & 2 == 2)

    ; Make sure the constant expression tests pass
    let testNum = 0
    while testNum < 11
        assert(testMulExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; ShiftExpr
;==================================================================================================
let testShiftExprConstexpr = [
    ; Test: left shift
    1 << 0 == 1,
    1 << 1 == 2,
    2 << 2 == 8,

    ; Test: arithmetic right shift
    8 >> 0 == 8,
    8 >> 1 == 4,
    8 >> 2 == 2,
    -8 >> 2 == -2,

    ; Test: logical right shift
    8 >>> 0 == 8,
    8 >>> 1 == 4,
    8 >>> 2 == 2,
    -1 >>> 63 == 1,     ; FIXME - this won't work if int type is 32-bit

    ; Make sure arithmetic right shifts behave as logical right shifts for unsigned types
    cast(-1 to uint8) >> cast(1 to uint8) is 
        cast(-1 to uint8) ^ cast(1 to uint8) << cast(7 to uint8),
    cast(-1 to uint16) >> cast(1 to uint16) is
        cast(-1 to uint16) ^ cast(1 to uint16) << cast(15 to uint16),
    cast(-1 to uint32) >> cast(1 to uint32) is
        cast(-1 to uint32) ^ cast(1 to uint32) << cast(31 to uint32),
    cast(-1 to uint64) >> cast(1 to uint64) is
        cast(-1 to uint64) ^ cast(1 to uint64) << cast(63 to uint64),
    cast(-1 to uint128) >> cast(1 to uint128) is
        cast(-1 to uint128) ^ cast(1 to uint128) << cast(127 to uint128)
]

func testShiftExpr()
    ; Test: left shift
    assert(1 << 0 == 1)
    assert(1 << 1 == 2)
    assert(2 << 2 == 8)

    ; Test: arithmetic right shift
    assert(8 >> 0 == 8)
    assert(8 >> 1 == 4)
    assert(8 >> 2 == 2)
    assert(-8 >> 2 == -2)

    ; Test: logical right shift
    assert(8 >>> 0 == 8)
    assert(8 >>> 1 == 4)
    assert(8 >>> 2 == 2)
    assert(-1 >>> 63 == 1)  ; FIXME - this won't work if int type is 32-bit

    ; Make sure arithmetic right shifts behave as logical right shifts for unsigned types
    assert(cast(-1 to uint8) >> cast(1 to uint8) is
        cast(-1 to uint8) ^ cast(1 to uint8) << cast(7 to uint8))
    assert(cast(-1 to uint16) >> cast(1 to uint16) is
        cast(-1 to uint16) ^ cast(1 to uint16) << cast(15 to uint16))
    assert(cast(-1 to uint32) >> cast(1 to uint32) is
        cast(-1 to uint32) ^ cast(1 to uint32) << cast(31 to uint32))
    assert(cast(-1 to uint64) >> cast(1 to uint64) is
        cast(-1 to uint64) ^ cast(1 to uint64) << cast(63 to uint64))
    assert(cast(-1 to uint128) >> cast(1 to uint128) is
        cast(-1 to uint128) ^ cast(1 to uint128) << cast(127 to uint128))

    ; Make sure the constant expression tests pass
    let testNum = 0
    while testNum < 16
        assert(testShiftExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; PrefixExpr
;==================================================================================================
let testPrefixExprConstexpr = [
    ; Test: + and - prefix operators
    +1 == 1,
    -1 == -1,

    ; Test: parentheses
    (1 + 2) * 2 == 6,
    1 + (2 * 2) == 5,
    ((1 + 2) * (3 + 4)) * 2 == 42,

    ; Test nested prefix expressions
    + + 1  == + + 1,
    + + 1  == 1,
    - - 1  == - - 1,
    - - 1  == 1
]

func testPrefixExprFunc1(someVal: ^int)
    $someVal *= 10
end

func testPrefixExprFunc2(someVal: ^^int)
    $$someVal *= 10
end

func testPrefixExpr()
    ; Test: + and - prefix operators
    assert(+1 == 1)
    assert(-1 == -1)
    
    ; Test: parentheses
    assert((1 + 2) * 2 == 6)
    assert(1 + (2 * 2) == 5)
    assert(((1 + 2) * (3 + 4)) * 2 == 42)

    ; Test nested prefix expressions
    assert(+ + 1  == + + 1)
    assert(+ + 1  == 1)
    assert(- - 1  == - - 1)
    assert(- - 1  == 1)

    ; Test address of (&) and pointer dereference ($)
    let intVal = 5
    testPrefixExprFunc1(&intVal)
    assert(intVal == 50)
    let ptrToIntVal = &intVal
    testPrefixExprFunc2(&ptrToIntVal)
    assert(intVal == 500)
    let arrayVal = [ 5, 10, 15, 20 ]
    testPrefixExprFunc1(&arrayVal[3])
    assert(arrayVal[3] == 200)

    ; Make sure the constant expression tests passed
    let testNum = 0
    while testNum < 9
        assert(testPrefixExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; PostfixExpr
;==================================================================================================
func testPostfixExprFuncCall1() -> int
    return 5
end

func testPostfixExprFuncCall2(v: int) -> int
    return v * 5
end

func testPostfixExprFuncCall3(v: [3]int) -> [3]int
    return [ 
        v[0] * 5,
        v[1] * 5,
        v[2] * 5
    ]
end

func testPostfixExprFuncCall4(v: [3]int) -> [3]int
    return v
end

func testPostfixExprFuncCall5(v1: int, v2: int, v3: int) -> int
    return v1 * v2 * v3
end

; Test: constant array lookups
let testPostfixExprConstexpr = [
    [1, 2, 3][2] == 3,
    [1, 2, 3][0] == 1
]

func testPostfixExpr()
    ; Test: increment and decrement
    let i = 0
    i++ 
    assert(i == 1)
    i++
    assert(i == 2)
    i--
    assert(i == 1)
    i--
    assert(i == 0)
    i--
    assert(i == -1)

    ; Test: function calls
    assert(testPostfixExprFuncCall1() == 5)
    assert(testPostfixExprFuncCall1() == testPostfixExprFuncCall1())
    assert(testPostfixExprFuncCall2(5) == 25)
    assert(testPostfixExprFuncCall3([1, 2, 3])[0] == 5)
    assert(testPostfixExprFuncCall3([1, 2, 3])[1] == 10)
    assert(testPostfixExprFuncCall3([1, 2, 3])[2] == 15)
    assert(testPostfixExprFuncCall4([1, 2, 3])[2] == 3)
    assert(testPostfixExprFuncCall5(1, 2, 3) == 6)
    
    ; Test: array indexing
    let array1 = [ 1, 2, 3, 4]
    assert(array1[0] == 1)
    assert(array1[1] == 2)
    assert(array1[3] == 4)
    array1[1] = 99
    assert(array1[1] == 99)

    let array2 = [[1, 2], [3, 4], [5, 6]]
    assert(array2[1][0] == 3)
    assert(array2[1][1] == 4)
    assert(array2[2][1] == 6)
    array2[1] = [7, 8]
    assert(array2[1][0] == 7)
    assert(array2[1][1] == 8)

    ; Test: pointer increment and decrement
    let ptr = &array1[2]
    assert($ptr == 3)
    ptr++
    assert($ptr == 4)
    ptr--
    assert($ptr == 3)
    ptr--
    assert($ptr == 99)

    ; Make sure the constant expression tests passed
    assert(testPostfixExprConstexpr[0])
    assert(testPostfixExprConstexpr[1])
end

;==================================================================================================
; CastExpr
;==================================================================================================

; Testing constant basic 'no-op' casts. 
; Note: More detailed cast tests can be found in 'casts.wolf'
let testConstCastExpr1 = cast(2 to int)
let testConstCastExpr2 = cast(2 to int64)

func testCastExpr()
    ; Testing basic 'no-op' casts.
    ; Note: More detailed cast tests can be found in 'casts.wolf'
    assert(2 == cast(2 to int))
    assert(2 == cast(2 to int64))
    assert(2 == testConstCastExpr1)
    assert(2 == testConstCastExpr2)
end

;==================================================================================================
; PrimaryExpr
;==================================================================================================

; Test: constant primary expressions of various types
let testPrimaryExprConst1 = 234
let testPrimaryExprConst2 = false
let testPrimaryExprConst3 = [44, 55, 66]
let testPrimaryExprConst4 = "Hello world!"  ; TODO: In future do more here?

func testPrimaryExpr()
    ; Test: IntLit
    let v1 = 1
    let v2 = 1234
    assert(v1 == 1)
    assert(v2 == 1234)

    ; Test: BoolLit
    let v3 = false
    let v4 = true
    assert(not v3)
    assert(v4)

    ; Test: StrLit
    ; TODO: In future do more here?
    let v5 = "Hello world!"

    ; Test: ArrayLit
    let v6 = [
        [ [ 1 ] ],
        [ [ 2 ] ]
    ]

    assert(v6[0][0][0] == 1)
    assert(v6[0][1][0] == 2)
    assert([11, 22, 33, 44][1] == 22)
    assert([11, 22, 33, 44][2] == 33)

    ; Make sure the constant expression tests passed
    assert(testPrimaryExprConst1 == 234)
    assert(not testPrimaryExprConst2)
    assert(testPrimaryExprConst3[1] == 55)
end

;==================================================================================================
; Lazy evaluation tests
;==================================================================================================
func testLazyEvalTrue() -> bool
    return true
end

func testLazyEvalTrueNoCall() -> bool
    ; Should not be called!
    assert(false)
    return true
end

func testLazyEvalFalse() -> bool
    return false
end

func testLazyEvalFalseNoCall() -> bool
    ; Should not be called!
    assert(false)
    return false
end

func testLazyEval()
    ; Test: lazy 'or'
    assert((
        testLazyEvalTrue() or
        testLazyEvalTrueNoCall() or
        testLazyEvalFalseNoCall()
    ) is true)

    ; Test: lazy 'and'
    assert((
        testLazyEvalFalse() and
        testLazyEvalTrueNoCall() and
        testLazyEvalFalseNoCall()
    ) is false)

    ; Test: lazy 'or' within sub expression which won't be called
    assert((
        testLazyEvalFalse() and (
            testLazyEvalTrueNoCall() or 
            testLazyEvalTrueNoCall() and testLazyEvalFalseNoCall()
        ) and
        testLazyEvalFalseNoCall()
    ) is false)

    ; Test: yeah this one is a bit mad...
    assert((
        testLazyEvalFalse() or (
            testLazyEvalTrue() and 
            testLazyEvalTrue() or
            testLazyEvalFalseNoCall()
        ) and (
            testLazyEvalFalse() or (
                testLazyEvalFalse() or
                testLazyEvalTrue()
            ) or
            testLazyEvalFalseNoCall()
        )
    ) is true)

    ; Test: 'while' loop lazy eval - there was a bug with this previously
    let v = 0

    while true and true
        v++
        break
    end

    assert(v == 1)

    while true or true
        v++
        break
    end

    assert(v == 2)

    ; Test 'loop repeat' lazy eval
    loop
        v++
        break
    repeat while true and true

    assert(v == 3)

    ; Test 'break' statement lazy eval
    while true 
        break if true and true
        v++
    end

    ; Test 'next' statement lazy eval
    loop
        v++
        next if true and true
        v++
    repeat while false or v < 4

    assert(v == 4)

    ; Test ternary expr lazy eval
    let v2 = v > 4 ? true and false : false or true
    assert(v2)
end

;==================================================================================================
; Run all the tests in this module
;==================================================================================================
func main() -> int
    ; Basic tests of AST grammar and operations
    testAssignExpr()
    testTernaryExpr()
    testOrExpr()
    testAndExpr()
    testNotExpr()
    testCmpExpr()
    testAddExpr()
    testMulExpr()
    testShiftExpr()
    testPrefixExpr()
    testPostfixExpr()
    testCastExpr()
    testPrimaryExpr()

    ; Test lazy evaluation
    testLazyEval()

    return 0
end
