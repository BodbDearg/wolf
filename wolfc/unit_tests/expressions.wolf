;==================================================================================================
; AssignExpr
;==================================================================================================
func testAssignExpr()
    var i = 0
    assert(i == 0)
    i = 1
    assert(i == 1)
    i += 2
    assert(i == 3)
    i -= 2
    assert(i == 1)
    i |= 4
    assert(i == 5)
    i |= 1
    assert(i == 5)
    i |= 2
    assert(i == 7)
    i ^= 1    
    assert(i == 6)
    i ^= 4
    assert(i == 2)
    i *= 5
    assert(i == 10)
    i /= 5
    assert(i == 2)
    i %= 3    
    assert(i == 2)
    i %= 2
    assert(i == 0)
    i = 7
    i &= 3
    assert(i == 3)
    i &= 3
    assert(i == 3)
    i &= 4
    assert(i == 0)
    i = 10
    i <<= 1
    assert(i == 20)
    i >>= 2
    assert(i == 5)
    i = -10
    i >>= 1
    assert(i == -5)
    i = -1
    i >>>= 63
    assert(i == 1)  ; FIXME - this won't work if int type is 32-bit    
end

;==================================================================================================
; TernaryExpr
;==================================================================================================
var testTernaryExprConstexpr = [
    (true ? 1 : 2) == 1,
    (false ? 1 : 2) == 2
]

func testTernaryExpr()
    assert((true ? 1 : 2) == 1)
    assert((false ? 1 : 2) == 2)

    var testNum = 0
    while testNum < 2
        assert(testOrExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; OrExpr
;==================================================================================================
var testOrExprConstexpr = [
    not (false or false),
    true or false,
    true or true,
    false or true
]

func testOrExpr()
    assert(not (false or false))
    assert(true or false)
    assert(true or true)
    assert(false or true)

    var testNum = 0
    while testNum < 4
        assert(testOrExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; AndExpr
;==================================================================================================
var testAndExprConstexpr = [
    not (false and false),
    not (true and false),
    not (false and true),
    true and true
]

func testAndExpr()
    assert(not (false and false))
    assert(not (true and false))
    assert(not (false and true))
    assert(true and true)

    var testNum = 0
    while testNum < 4
        assert(testAndExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; NotExpr
;==================================================================================================
var testNotExprConstexpr = [
    not false,
    not 1 > 2,
    not not true,
    not not 1 < 2,
    (~-1) == 0,
    (~-2) == 1
]

func testNotExpr()
    assert(not false)
    assert(not 1 > 2)
    assert(not not true)
    assert(not not 1 < 2)
    assert((~-1) == 0)
    assert((~-2) == 1)

    var testNum = 0
    while testNum < 6 
        assert(testNotExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; CmpExpr
;==================================================================================================
var testCmpExprConstexpr = [
    2 == 2,
    not 1 == 2,
    not 3 == 2,
    not 2 != 2,
    1 != 2,
    3 != 2,
    1 < 2,
    not 2 < 2,
    not 3 < 2,
    1 <= 2,
    2 <= 2,
    not 3 <= 2,
    2 > 1,
    not 1 > 1,
    not 0 > 1,
    2 >= 1,
    1 >= 1,
    not 0 >= 1
]

func testCmpExpr()
    assert(2 == 2)
    assert(not 1 == 2)
    assert(not 3 == 2)
    assert(not 2 != 2)
    assert(1 != 2)
    assert(3 != 2)
    assert(1 < 2)
    assert(not 2 < 2)
    assert(not 3 < 2)
    assert(1 <= 2)
    assert(2 <= 2)
    assert(not 3 <= 2)
    assert(2 > 1)
    assert(not 1 > 1)
    assert(not 0 > 1)
    assert(2 >= 1)
    assert(1 >= 1)
    assert(not 0 >= 1)

    var testNum = 0
    while testNum < 18 
        assert(testCmpExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; AddExpr
;==================================================================================================
var testAddExprConstexpr = [
    1 + 2 == 3,
    1 + +2 == 3,
    +1 + +2 == 3,
    1 + -2 == -1,
    -1 + -2 == -3,
    2 - 5 == -3,
    2 - -5 == 7,
    -2 - -5 == 3,
    1 | 2 == 3,
    1 | 1 == 1,
    0 | 1 == 1,
    1 ^ 2 == 3,
    1 ^ 1 == 0,
    0 ^ 1 == 1
]

func testAddExpr()
    assert(1 + 2 == 3)
    assert(1 + +2 == 3)
    assert(+1 + +2 == 3)
    assert(1 + -2 == -1)
    assert(-1 + -2 == -3)
    assert(2 - 5 == -3)
    assert(2 - -5 == 7)
    assert(-2 - -5 == 3)
    assert(1 | 2 == 3)
    assert(1 | 1 == 1)
    assert(0 | 1 == 1)
    assert(1 ^ 2 == 3)
    assert(1 ^ 1 == 0)
    assert(0 ^ 1 == 1)

    var testNum = 0
    while testNum < 14
        assert(testAddExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; MulExpr
;==================================================================================================
var testMulExprConstexpr = [
    2 * 2 == 4,
    2 * -2 == -4,
    -2 * -2 == 4,
    10 / 2 == 5,
    10 / -2 == -5,
    5 % 3 == 2,
    5 % 3 == 2,
    1 & 1 == 1,
    2 & 1 == 0,
    3 & 1 == 1,
    6 & 2 == 2
]

func testMulExpr()
    assert(2 * 2 == 4)
    assert(2 * -2 == -4)
    assert(-2 * -2 == 4)
    assert(10 / 2 == 5)
    assert(10 / -2 == -5)
    assert(5 % 3 == 2)
    assert(5 % -3 == 2)
    assert(1 & 1 == 1)
    assert(2 & 1 == 0)
    assert(3 & 1 == 1)
    assert(6 & 2 == 2)

    var testNum = 0
    while testNum < 11
        assert(testMulExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; ShiftExpr
;==================================================================================================
var testShiftExprConstexpr = [
    1 << 0 == 1,
    1 << 1 == 2,
    2 << 2 == 8,
    8 >> 0 == 8,
    8 >> 1 == 4,
    8 >> 2 == 2,
    -8 >> 2 == -2,
    8 >>> 0 == 8,
    8 >>> 1 == 4,
    8 >>> 2 == 2,
    -1 >>> 63 == 1  ; FIXME - this won't work if int type is 32-bit
]

func testShiftExpr()
    assert(1 << 0 == 1)
    assert(1 << 1 == 2)
    assert(2 << 2 == 8)
    assert(8 >> 0 == 8)
    assert(8 >> 1 == 4)
    assert(8 >> 2 == 2)
    assert(-8 >> 2 == -2)
    assert(8 >>> 0 == 8)
    assert(8 >>> 1 == 4)
    assert(8 >>> 2 == 2)
    assert(-1 >>> 63 == 1)  ; FIXME - this won't work if int type is 32-bit

    var testNum = 0
    while testNum < 11
        assert(testShiftExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; UnaryExpr
;==================================================================================================
var testUnaryExprConstexpr = [
    +1 == 1,
    -1 == -1,
    (1 + 2) * 2 == 6,
    1 + (2 * 2) == 5,
    ((1 + 2) * (3 + 4)) * 2 == 42
]

func testUnaryExpr()
    assert(+1 == 1)
    assert(-1 == -1)
    assert((1 + 2) * 2 == 6)
    assert(1 + (2 * 2) == 5)
    assert(((1 + 2) * (3 + 4)) * 2 == 42)

    ; FIXME - these don't work yet
    ; assert(+ + 1  == + + 1)
    ; assert(- - 1  == - - 1)

    var testNum = 0
    while testNum < 5
        assert(testUnaryExprConstexpr[testNum])
        testNum++
    end
end

;==================================================================================================
; PostfixExpr
;==================================================================================================
func testPostfixExprFuncCall1() -> int
    return 5
end

func testPostfixExprFuncCall2(v: int) -> int
    return v * 5
end

func testPostfixExprFuncCall3(v: int[3]) -> int[3]
    return [ 
        v[0] * 5,
        v[1] * 5,
        v[2] * 5
    ]
end

func testPostfixExprFuncCall4(v: int[3]) -> int[3]
    return v
end

func testPostfixExprFuncCall5(v1: int, v2: int, v3: int) -> int
    return v1 * v2 * v3
end

var testPostfixExprConstexpr = [
    [1, 2, 3][2] == 3,
    [1, 2, 3][0] == 1
]

func testPostfixExpr()
    ; Increment and decrement
    var i = 0
    i++ 
    assert(i == 1)
    i++
    assert(i == 2)
    i--
    assert(i == 1)
    i--
    assert(i == 0)
    i--
    assert(i == -1)

    ; Function calls
    assert(testPostfixExprFuncCall1() == 5)
    assert(testPostfixExprFuncCall1() == testPostfixExprFuncCall1())
    assert(testPostfixExprFuncCall2(5) == 25)
    assert(testPostfixExprFuncCall3([1, 2, 3])[0] == 5)
    assert(testPostfixExprFuncCall3([1, 2, 3])[1] == 10)
    assert(testPostfixExprFuncCall3([1, 2, 3])[2] == 15)
    assert(testPostfixExprFuncCall4([1, 2, 3])[2] == 3)
    assert(testPostfixExprFuncCall5(1, 2, 3) == 6)
    
    ; Array indexing
    var array1 = [ 1, 2, 3, 4]
    assert(array1[0] == 1)
    assert(array1[1] == 2)
    assert(array1[3] == 4)
    array1[1] = 99
    assert(array1[1] == 99)

    var array2 = [[1, 2], [3, 4], [5, 6]]
    assert(array2[1][0] == 3)
    assert(array2[1][1] == 4)
    assert(array2[2][1] == 6)
    array2[1] = [7, 8]
    assert(array2[1][0] == 7)
    assert(array2[1][1] == 8)

    assert(testPostfixExprConstexpr[0])
    assert(testPostfixExprConstexpr[1])
end

;==================================================================================================
; CastExpr
;==================================================================================================
func testCastExpr()
    assert(2 == cast(2 to int))     ; No-op cast
end

;==================================================================================================
; PrimaryExpr
;==================================================================================================
func testPrimaryExpr()
    ; IntLit
    var v1 = 1
    var v2 = 1234
    assert(v1 == 1)
    assert(v2 == 1234)

    ; BoolLit
    var v3 = false
    var v4 = true
    assert(not v3)
    assert(v4)

    ; StrLit
    ; TODO: In future do more here?
    var v5 = "Hello world!"

    ; ArrayLit
    var v6 = [
        [ [ 1 ] ],
        [ [ 2 ] ]
    ]

    assert(v6[0][0][0] == 1)
    assert(v6[0][1][0] == 2)
end

;==================================================================================================
; Run the tests
;==================================================================================================
func main() -> int
    ; Basic tests of AST grammar and operations
    testAssignExpr()
    testTernaryExpr()
    testOrExpr()
    testAndExpr()
    testNotExpr()
    testCmpExpr()
    testAddExpr()
    testMulExpr()
    testShiftExpr()
    testUnaryExpr()
    testPostfixExpr()
    testCastExpr()
    testPrimaryExpr()
    return 0
end
