//==============================================================================
// The Wolf Programming Language.
//      Copyright (c) 2016, Darragh Coy.
//      See LICENSE.txt for license details.
//==============================================================================

#include "IsAddressable.hpp"

#include "AST/Nodes/AddExpr.hpp"
#include "AST/Nodes/AssignExpr.hpp"
#include "AST/Nodes/CastExpr.hpp"
#include "AST/Nodes/CmpExpr.hpp"
#include "AST/Nodes/LAndExpr.hpp"
#include "AST/Nodes/LOrExpr.hpp"
#include "AST/Nodes/MulExpr.hpp"
#include "AST/Nodes/NotExpr.hpp"
#include "AST/Nodes/PostfixExpr.hpp"
#include "AST/Nodes/PrefixExpr.hpp"
#include "AST/Nodes/PrimaryExpr.hpp"
#include "AST/Nodes/ShiftExpr.hpp"
#include "AST/Nodes/TernaryExpr.hpp"

WC_BEGIN_NAMESPACE
WC_LLVM_BACKEND_BEGIN_NAMESPACE

IsAddressable::IsAddressable(Codegen & cg) : mCG(cg) {
    WC_EMPTY_FUNC_BODY();
}

/* These node types are never addressable */
#define WC_IMPL_NODE_NOT_ADDRESSABLE(NodeType)\
    void IsAddressable::visit(const AST::NodeType & astNode) {\
        WC_UNUSED_PARAM(astNode);\
        mNodeIsAddressable = false;\
    }

WC_IMPL_NODE_NOT_ADDRESSABLE(AddExprAdd)
WC_IMPL_NODE_NOT_ADDRESSABLE(AddExprBOr)
WC_IMPL_NODE_NOT_ADDRESSABLE(AddExprBXor)
WC_IMPL_NODE_NOT_ADDRESSABLE(AddExprSub)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssertStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssign)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignARShift)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignAdd)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignBAnd)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignBOr)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignBXor)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignDiv)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignLRShift)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignLShift)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignMul)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignRem)
WC_IMPL_NODE_NOT_ADDRESSABLE(AssignExprAssignSub)
WC_IMPL_NODE_NOT_ADDRESSABLE(BoolLit)
WC_IMPL_NODE_NOT_ADDRESSABLE(BreakStmntNoCond)
WC_IMPL_NODE_NOT_ADDRESSABLE(BreakStmntWithCond)
WC_IMPL_NODE_NOT_ADDRESSABLE(CastExprCast)
WC_IMPL_NODE_NOT_ADDRESSABLE(CmpExprEQ)
WC_IMPL_NODE_NOT_ADDRESSABLE(CmpExprGE)
WC_IMPL_NODE_NOT_ADDRESSABLE(CmpExprGT)
WC_IMPL_NODE_NOT_ADDRESSABLE(CmpExprLE)
WC_IMPL_NODE_NOT_ADDRESSABLE(CmpExprLT)
WC_IMPL_NODE_NOT_ADDRESSABLE(CmpExprNE)
WC_IMPL_NODE_NOT_ADDRESSABLE(DeclDefFunc)
WC_IMPL_NODE_NOT_ADDRESSABLE(DeclDefVarDecl)
WC_IMPL_NODE_NOT_ADDRESSABLE(Func)
WC_IMPL_NODE_NOT_ADDRESSABLE(FuncArg)
WC_IMPL_NODE_NOT_ADDRESSABLE(IfStmntElse)
WC_IMPL_NODE_NOT_ADDRESSABLE(IfStmntElseIf)
WC_IMPL_NODE_NOT_ADDRESSABLE(IfStmntNoElse)
WC_IMPL_NODE_NOT_ADDRESSABLE(IntLit)
WC_IMPL_NODE_NOT_ADDRESSABLE(LAndExprAnd)
WC_IMPL_NODE_NOT_ADDRESSABLE(LOrExprOr)
WC_IMPL_NODE_NOT_ADDRESSABLE(LoopStmntNoCond)
WC_IMPL_NODE_NOT_ADDRESSABLE(LoopStmntWithCond)
WC_IMPL_NODE_NOT_ADDRESSABLE(Module)
WC_IMPL_NODE_NOT_ADDRESSABLE(MulExprBAnd)
WC_IMPL_NODE_NOT_ADDRESSABLE(MulExprDiv)
WC_IMPL_NODE_NOT_ADDRESSABLE(MulExprMul)
WC_IMPL_NODE_NOT_ADDRESSABLE(MulExprRem)
WC_IMPL_NODE_NOT_ADDRESSABLE(NextStmntNoCond)
WC_IMPL_NODE_NOT_ADDRESSABLE(NextStmntWithCond)
WC_IMPL_NODE_NOT_ADDRESSABLE(NoOpStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(NotExprBNot)
WC_IMPL_NODE_NOT_ADDRESSABLE(NotExprLNot)
WC_IMPL_NODE_NOT_ADDRESSABLE(NullLit)
WC_IMPL_NODE_NOT_ADDRESSABLE(PostfixExprDec)
WC_IMPL_NODE_NOT_ADDRESSABLE(PostfixExprInc)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrefixExprAddrOf)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrefixExprMinus)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrefixExprPlus)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrimaryExprBoolLit)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrimaryExprIntLit)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrimaryExprNullLit)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrimaryExprRandExpr)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrimaryExprReadnumExpr)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrimaryExprStrLit)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrimaryExprTimeExpr)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrimitiveType)
WC_IMPL_NODE_NOT_ADDRESSABLE(PrintStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(RandExprRand)
WC_IMPL_NODE_NOT_ADDRESSABLE(RandExprSRand)
WC_IMPL_NODE_NOT_ADDRESSABLE(ReadnumExpr)
WC_IMPL_NODE_NOT_ADDRESSABLE(ReturnStmntNoCondVoid)
WC_IMPL_NODE_NOT_ADDRESSABLE(ReturnStmntNoCondWithValue)
WC_IMPL_NODE_NOT_ADDRESSABLE(ReturnStmntWithCondAndValue)
WC_IMPL_NODE_NOT_ADDRESSABLE(ReturnStmntWithCondVoid)
WC_IMPL_NODE_NOT_ADDRESSABLE(Scope)
WC_IMPL_NODE_NOT_ADDRESSABLE(ScopeStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(ShiftExprARShift)
WC_IMPL_NODE_NOT_ADDRESSABLE(ShiftExprLRShift)
WC_IMPL_NODE_NOT_ADDRESSABLE(ShiftExprLShift)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntAssertStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntAssignExpr)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntBreakStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntIfStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntLoopStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntNextStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntNoOpStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntPrintStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntReturnStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntScopeStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntVarDecl)
WC_IMPL_NODE_NOT_ADDRESSABLE(StmntWhileStmnt)
WC_IMPL_NODE_NOT_ADDRESSABLE(StrLit)
WC_IMPL_NODE_NOT_ADDRESSABLE(TernaryExprWithCond)
WC_IMPL_NODE_NOT_ADDRESSABLE(TimeExpr)
WC_IMPL_NODE_NOT_ADDRESSABLE(TypeArray)
WC_IMPL_NODE_NOT_ADDRESSABLE(TypePrimitive)
WC_IMPL_NODE_NOT_ADDRESSABLE(TypePtr)
WC_IMPL_NODE_NOT_ADDRESSABLE(VarDeclExplicitType)
WC_IMPL_NODE_NOT_ADDRESSABLE(VarDeclInferType)
WC_IMPL_NODE_NOT_ADDRESSABLE(WhileStmnt)

/* These node types are always addressable */
#define WC_IMPL_NODE_IS_ADDRESSABLE(NodeType)\
    void IsAddressable::visit(const AST::NodeType & astNode) {\
        WC_UNUSED_PARAM(astNode);\
        mNodeIsAddressable = true;\
    }

WC_IMPL_NODE_IS_ADDRESSABLE(ArrayLit)
WC_IMPL_NODE_IS_ADDRESSABLE(Identifier)
WC_IMPL_NODE_IS_ADDRESSABLE(PostfixExprArrayLookup)
WC_IMPL_NODE_IS_ADDRESSABLE(PrefixExprPtrDeref)
WC_IMPL_NODE_IS_ADDRESSABLE(PrimaryExprArrayLit)
WC_IMPL_NODE_IS_ADDRESSABLE(PrimaryExprIdentifier)

#undef WC_IMPL_NODE_IS_ADDRESSABLE

/* These expression nodes delegate the query to sub expressions */
#define WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(NodeType)\
    void IsAddressable::visit(const AST::NodeType & astNode) {\
        astNode.mExpr.accept(*this);\
    }

WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(AddExprNoOp)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(AssignExprNoAssign)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(CastExprNoCast)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(CmpExprNoOp)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(LAndExprNoOp)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(LOrExprNoOp)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(MulExprNoOp)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(NotExprNoOp)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(PostfixExprNoOp)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(PrefixExprNoOp)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(PrimaryExprParen)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(ShiftExprNoOp)
WC_IMPL_EXPR_DELEGATES_QUERY_TO_INNER_EXPR(TernaryExprNoCond)

#undef WC_IMPL_EXPR_DELEGATES_QUERY_TO_SUB_EXPRS

/* These nodes we implement the query manually for */
void IsAddressable::visit(const AST::PostfixExprFuncCall & astNode) {
    #warning TODO - addressible if function call return value requires storage (e.g array)
}
 
#undef WC_IMPL_NODE_NOT_ADDRESSABLE

WC_LLVM_BACKEND_END_NAMESPACE
WC_END_NAMESPACE
